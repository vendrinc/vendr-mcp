// This file is auto-generated by @hey-api/openapi-ts

export type CategoryListResponse = {
  data: Array<{
    /**
     * Unique identifier for the category
     */
    id: string;
    /**
     * Name of the category
     */
    name: string;
    /**
     * Description of the category
     */
    description: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
    /**
     * Array of child categories
     */
    childCategories?: Array<{
      /**
       * Unique identifier for the category
       */
      id: string;
      /**
       * Name of the category
       */
      name: string;
      /**
       * Description of the category
       */
      description: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
    }>;
  }>;
  pagination: {
    total: number;
    limit: number;
    offset: number;
  };
};

export type CompanySearchResponse = {
  data: Array<{
    id: string;
    name: string;
    legalName: string;
    domain: string;
    url?: string;
    description: string;
    /**
     * If false, indicates that the company is active as a brand, even if acquired or merged with another company
     */
    discontinued: boolean;
    /**
     * The logo of the company.
     */
    icon?: string;
    /**
     * The fiscal year end for the company
     */
    fiscalYearEnd?: string;
    /**
     * Array of public stock market symbols for the company
     */
    stockSymbols?: Array<{
      /**
       * The stock market symbol for the company
       */
      symbol: string;
      /**
       * The stock market exchange for this stock symbol
       */
      exchange: string;
    }>;
    category?: {
      /**
       * Unique identifier for the category
       */
      id: string;
      /**
       * Name of the category
       */
      name: string;
      /**
       * Description of the category
       */
      description: string;
      /**
       * ID of the parent category
       */
      parentCategoryId?: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
    };
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
    competitors?: Array<{
      id: string;
      name: string;
      domain: string;
      /**
       * The logo of the company.
       */
      icon?: string;
    }>;
  }>;
  pagination: {
    total: number;
    limit: number;
    offset: number;
  };
};

export type CompanyProductsListResponse = {
  data: Array<{
    /**
     * The ID of the product
     */
    id: string;
    /**
     * ID of the product family this product is a part of
     */
    productFamilyId?: string;
    /**
     * The name of the product
     */
    name: string;
    /**
     * The description of the product
     */
    description: string;
    /**
     * The icon of the product
     */
    icon?: string;
    /**
     * The URL of the product
     */
    url?: string;
    pricingDimensions: Array<{
      /**
       * The ID of the dimension.
       */
      id: string;
      /**
       * The name of the dimension.
       */
      name: string;
      /**
       * The description of the dimension.
       */
      description: string;
      /**
       * whether the impact of this dimension on price is clearly known or not
       */
      priceImpactKnown: boolean;
      formField:
        | {
            type: "checkbox";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: boolean;
            value?: number;
          }
        | {
            type: "number";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: number;
            /**
             * Minimum allowed value
             */
            min?: number;
            /**
             * Maximum allowed value
             */
            max?: number;
            /**
             * Step increment for number input
             */
            step?: number;
          }
        | {
            type: "select";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: string;
            /**
             * Available options for select field
             */
            options: Array<{
              label: string;
              value: string;
            }>;
          };
      dependsOn: {
        /**
         * The ID of the dimension that this dimension depends on
         */
        dependsOnDimensionId?: string;
        /**
         * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
         */
        dependency?: "quantity" | "inclusion";
      };
    }>;
    includedFeatures: Array<{
      /**
       * Feature ID
       */
      id: string;
      /**
       * Feature name
       */
      name: string;
      /**
       * Feature description
       */
      description: string;
    }>;
    /**
     * Currency of the default price
     */
    currency?: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
    competitors: Array<{
      companyId: string;
      companyName: string;
      domain: string;
      companyIcon?: string;
      productId: string;
      /**
       * The typical price of the product
       */
      defaultPrice?: number;
      productIcon?: string;
      productUrl?: string;
      productName: string;
      pricingDimensions: Array<{
        /**
         * The ID of the dimension.
         */
        id: string;
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The description of the dimension.
         */
        description: string;
        /**
         * whether the impact of this dimension on price is clearly known or not
         */
        priceImpactKnown: boolean;
        formField:
          | {
              type: "checkbox";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: boolean;
              value?: number;
            }
          | {
              type: "number";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: number;
              /**
               * Minimum allowed value
               */
              min?: number;
              /**
               * Maximum allowed value
               */
              max?: number;
              /**
               * Step increment for number input
               */
              step?: number;
            }
          | {
              type: "select";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: string;
              /**
               * Available options for select field
               */
              options: Array<{
                label: string;
                value: string;
              }>;
            };
        dependsOn: {
          /**
           * The ID of the dimension that this dimension depends on
           */
          dependsOnDimensionId?: string;
          /**
           * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
           */
          dependency?: "quantity" | "inclusion";
        };
      }>;
      includedFeatures: Array<{
        /**
         * Feature ID
         */
        id: string;
        /**
         * Feature name
         */
        name: string;
        /**
         * Feature description
         */
        description: string;
      }>;
    }>;
  }>;
  pagination: {
    total: number;
    limit: number;
    offset: number;
  };
};

export type CompanyProductFamiliesListResponse = {
  data: Array<{
    /**
     * The ID of the product family
     */
    id: string;
    /**
     * The name of the product family
     */
    name: string;
    /**
     * Range of prices products in this product family typically sell at
     */
    defaultPriceRange?: {
      min: number;
      max: number;
      /**
       * Currency of the default price range
       */
      currency: string;
    };
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
    products?: Array<{
      /**
       * The ID of the product
       */
      id: string;
      /**
       * ID of the product family this product is a part of
       */
      productFamilyId?: string;
      /**
       * The name of the product
       */
      name: string;
      /**
       * The description of the product
       */
      description?: string;
      /**
       * The icon of the product
       */
      icon?: string;
      /**
       * URL of the product
       */
      url?: string;
      /**
       * The typical price of the product
       */
      defaultPrice?: number;
      /**
       * Currency of the default price
       */
      currency?: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
    }>;
  }>;
  pagination: {
    total: number;
    limit: number;
    offset: number;
  };
};

export type IntentSearchResponse = {
  data: Array<{
    id: string;
    userDetails: {
      companyName: string;
      domain: string;
      countryCode?: string;
      city?: string;
      region?: string;
      sector?: string;
      headcount?: number;
      estimatedRevenue?: number;
      estimatedRevenueRawValue?: string;
    };
    timestamp: string;
    event:
      | {
          engagementType: "price-estimate";
          product?: {
            /**
             * The ID of the product
             */
            id: string;
            /**
             * ID of the product family this product is a part of
             */
            productFamilyId?: string;
            /**
             * The name of the product
             */
            name: string;
            /**
             * The description of the product
             */
            description?: string;
            /**
             * The icon of the product
             */
            icon?: string;
            /**
             * URL of the product
             */
            url?: string;
            /**
             * The typical price of the product
             */
            defaultPrice?: number;
            /**
             * Currency of the default price
             */
            currency?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          company: {
            id: string;
            name: string;
            legalName: string;
            domain: string;
            url?: string;
            description: string;
            /**
             * If false, indicates that the company is active as a brand, even if acquired or merged with another company
             */
            discontinued: boolean;
            /**
             * The logo of the company.
             */
            icon?: string;
            /**
             * The fiscal year end for the company
             */
            fiscalYearEnd?: string;
            /**
             * Array of public stock market symbols for the company
             */
            stockSymbols?: Array<{
              /**
               * The stock market symbol for the company
               */
              symbol: string;
              /**
               * The stock market exchange for this stock symbol
               */
              exchange: string;
            }>;
            category?: {
              /**
               * Unique identifier for the category
               */
              id: string;
              /**
               * Name of the category
               */
              name: string;
              /**
               * Description of the category
               */
              description: string;
              /**
               * ID of the parent category
               */
              parentCategoryId?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          requestedOn: string;
          /**
           * Price estimate distribution at 5 percentile increments
           */
          estimate: {
            /**
             * 10th percentile price estimate
             */
            percentile10?: number;
            /**
             * 15th percentile price estimate
             */
            percentile15?: number;
            /**
             * 20th percentile price estimate
             */
            percentile20?: number;
            /**
             * 25th percentile price estimate
             */
            percentile25?: number;
            /**
             * 30th percentile price estimate
             */
            percentile30?: number;
            /**
             * 35th percentile price estimate
             */
            percentile35?: number;
            /**
             * 40th percentile price estimate
             */
            percentile40?: number;
            /**
             * 45th percentile price estimate
             */
            percentile45?: number;
            /**
             * 50th percentile price estimate (median)
             */
            percentile50?: number;
            /**
             * 55th percentile price estimate
             */
            percentile55?: number;
            /**
             * 60th percentile price estimate
             */
            percentile60?: number;
            /**
             * 65th percentile price estimate
             */
            percentile65?: number;
            /**
             * 70th percentile price estimate
             */
            percentile70?: number;
            /**
             * 75th percentile price estimate
             */
            percentile75?: number;
            /**
             * 80th percentile price estimate
             */
            percentile80?: number;
            /**
             * 85th percentile price estimate
             */
            percentile85?: number;
            /**
             * 90th percentile price estimate
             */
            percentile90?: number;
          };
          /**
           * Product level price estimate distributions
           */
          productEstimates?: Array<
            | {
                status: "success";
                /**
                 * Whether the product estimate was defaulted to a fallback
                 */
                defaulted: boolean;
                /**
                 * Price estimate distribution at 5 percentile increments
                 */
                estimate: {
                  /**
                   * 10th percentile price estimate
                   */
                  percentile10: number;
                  /**
                   * 15th percentile price estimate
                   */
                  percentile15: number;
                  /**
                   * 20th percentile price estimate
                   */
                  percentile20: number;
                  /**
                   * 25th percentile price estimate
                   */
                  percentile25: number;
                  /**
                   * 30th percentile price estimate
                   */
                  percentile30: number;
                  /**
                   * 35th percentile price estimate
                   */
                  percentile35: number;
                  /**
                   * 40th percentile price estimate
                   */
                  percentile40: number;
                  /**
                   * 45th percentile price estimate
                   */
                  percentile45: number;
                  /**
                   * 50th percentile price estimate (median)
                   */
                  percentile50: number;
                  /**
                   * 55th percentile price estimate
                   */
                  percentile55: number;
                  /**
                   * 60th percentile price estimate
                   */
                  percentile60: number;
                  /**
                   * 65th percentile price estimate
                   */
                  percentile65: number;
                  /**
                   * 70th percentile price estimate
                   */
                  percentile70: number;
                  /**
                   * 75th percentile price estimate
                   */
                  percentile75: number;
                  /**
                   * 80th percentile price estimate
                   */
                  percentile80: number;
                  /**
                   * 85th percentile price estimate
                   */
                  percentile85: number;
                  /**
                   * 90th percentile price estimate
                   */
                  percentile90: number;
                };
                /**
                 * Name of the product
                 */
                name: string;
                /**
                 * ID of the product
                 */
                productId: string;
              }
            | {
                status: "error";
                code: "pricing_failed" | "validation_failed";
                /**
                 * Whether the product estimate was defaulted to a fallback, that then failed
                 */
                defaulted: boolean;
                /**
                 * Error message
                 */
                message: string;
                /**
                 * Name of the product
                 */
                name: string;
                /**
                 * ID of the product
                 */
                productId: string;
              }
          >;
          /**
           * Currency code (ISO 4217)
           */
          currency?: string;
          /**
           * Timestamp when this estimate was generated
           */
          timestamp?: string;
        }
      | {
          engagementType: "price-check";
          product?: {
            /**
             * The ID of the product
             */
            id: string;
            /**
             * ID of the product family this product is a part of
             */
            productFamilyId?: string;
            /**
             * The name of the product
             */
            name: string;
            /**
             * The description of the product
             */
            description?: string;
            /**
             * The icon of the product
             */
            icon?: string;
            /**
             * URL of the product
             */
            url?: string;
            /**
             * The typical price of the product
             */
            defaultPrice?: number;
            /**
             * Currency of the default price
             */
            currency?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          company: {
            id: string;
            name: string;
            legalName: string;
            domain: string;
            url?: string;
            description: string;
            /**
             * If false, indicates that the company is active as a brand, even if acquired or merged with another company
             */
            discontinued: boolean;
            /**
             * The logo of the company.
             */
            icon?: string;
            /**
             * The fiscal year end for the company
             */
            fiscalYearEnd?: string;
            /**
             * Array of public stock market symbols for the company
             */
            stockSymbols?: Array<{
              /**
               * The stock market symbol for the company
               */
              symbol: string;
              /**
               * The stock market exchange for this stock symbol
               */
              exchange: string;
            }>;
            category?: {
              /**
               * Unique identifier for the category
               */
              id: string;
              /**
               * Name of the category
               */
              name: string;
              /**
               * Description of the category
               */
              description: string;
              /**
               * ID of the parent category
               */
              parentCategoryId?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          /**
           * Whether the price check is for a new purchase or a renewal.
           */
          purchaseType: "new_purchase" | "renewal";
          /**
           * The date of the renewal estimate.
           */
          estimateRenewalDate?: string;
          /**
           * The approximate range for the estimated contract value.
           */
          estimateContractValueRange?: {
            /**
             * The minimum estimated contract value.
             */
            min: number;
            /**
             * The maximum estimated contract value.
             */
            max: number;
          };
          requestedOn: string;
        }
      | {
          engagementType: "catalog-view-verified";
          product?: {
            /**
             * The ID of the product
             */
            id: string;
            /**
             * ID of the product family this product is a part of
             */
            productFamilyId?: string;
            /**
             * The name of the product
             */
            name: string;
            /**
             * The description of the product
             */
            description?: string;
            /**
             * The icon of the product
             */
            icon?: string;
            /**
             * URL of the product
             */
            url?: string;
            /**
             * The typical price of the product
             */
            defaultPrice?: number;
            /**
             * Currency of the default price
             */
            currency?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          company: {
            id: string;
            name: string;
            legalName: string;
            domain: string;
            url?: string;
            description: string;
            /**
             * If false, indicates that the company is active as a brand, even if acquired or merged with another company
             */
            discontinued: boolean;
            /**
             * The logo of the company.
             */
            icon?: string;
            /**
             * The fiscal year end for the company
             */
            fiscalYearEnd?: string;
            /**
             * Array of public stock market symbols for the company
             */
            stockSymbols?: Array<{
              /**
               * The stock market symbol for the company
               */
              symbol: string;
              /**
               * The stock market exchange for this stock symbol
               */
              exchange: string;
            }>;
            category?: {
              /**
               * Unique identifier for the category
               */
              id: string;
              /**
               * Name of the category
               */
              name: string;
              /**
               * Description of the category
               */
              description: string;
              /**
               * ID of the parent category
               */
              parentCategoryId?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          viewedAt: string;
          totalDailyVisits?: number;
        }
      | {
          engagementType: "catalog-view";
          product?: {
            /**
             * The ID of the product
             */
            id: string;
            /**
             * ID of the product family this product is a part of
             */
            productFamilyId?: string;
            /**
             * The name of the product
             */
            name: string;
            /**
             * The description of the product
             */
            description?: string;
            /**
             * The icon of the product
             */
            icon?: string;
            /**
             * URL of the product
             */
            url?: string;
            /**
             * The typical price of the product
             */
            defaultPrice?: number;
            /**
             * Currency of the default price
             */
            currency?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          company: {
            id: string;
            name: string;
            legalName: string;
            domain: string;
            url?: string;
            description: string;
            /**
             * If false, indicates that the company is active as a brand, even if acquired or merged with another company
             */
            discontinued: boolean;
            /**
             * The logo of the company.
             */
            icon?: string;
            /**
             * The fiscal year end for the company
             */
            fiscalYearEnd?: string;
            /**
             * Array of public stock market symbols for the company
             */
            stockSymbols?: Array<{
              /**
               * The stock market symbol for the company
               */
              symbol: string;
              /**
               * The stock market exchange for this stock symbol
               */
              exchange: string;
            }>;
            category?: {
              /**
               * Unique identifier for the category
               */
              id: string;
              /**
               * Name of the category
               */
              name: string;
              /**
               * Description of the category
               */
              description: string;
              /**
               * ID of the parent category
               */
              parentCategoryId?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          viewedAt: string;
          totalDailyVisits?: number;
        };
    origin?: string;
  }>;
  pagination: {
    total: number;
    limit: number;
    offset: number;
  };
};

export type CompanyProductFamilyDetail = {
  /**
   * The ID of the product family
   */
  id: string;
  /**
   * The name of the product family
   */
  name: string;
  /**
   * Range of prices products in this product family typically sell at
   */
  defaultPriceRange?: {
    min: number;
    max: number;
    /**
     * Currency of the default price range
     */
    currency: string;
  };
  /**
   * Date and time when this record was last updated
   */
  lastUpdatedAt: string;
  products?: Array<{
    /**
     * The ID of the product
     */
    id: string;
    /**
     * ID of the product family this product is a part of
     */
    productFamilyId?: string;
    /**
     * The name of the product
     */
    name: string;
    /**
     * The description of the product
     */
    description?: string;
    /**
     * The icon of the product
     */
    icon?: string;
    /**
     * URL of the product
     */
    url?: string;
    /**
     * The typical price of the product
     */
    defaultPrice?: number;
    /**
     * Currency of the default price
     */
    currency?: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
  }>;
};

export type CategorySummary = {
  /**
   * Unique identifier for the category
   */
  id: string;
  /**
   * Name of the category
   */
  name: string;
  /**
   * Description of the category
   */
  description: string;
  /**
   * Date and time when this record was last updated
   */
  lastUpdatedAt: string;
  /**
   * Array of child categories
   */
  childCategories?: Array<{
    /**
     * Unique identifier for the category
     */
    id: string;
    /**
     * Name of the category
     */
    name: string;
    /**
     * Description of the category
     */
    description: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
  }>;
};

export type CompanySummary = {
  id: string;
  name: string;
  legalName: string;
  domain: string;
  url?: string;
  description: string;
  /**
   * If false, indicates that the company is active as a brand, even if acquired or merged with another company
   */
  discontinued: boolean;
  /**
   * The logo of the company.
   */
  icon?: string;
  /**
   * The fiscal year end for the company
   */
  fiscalYearEnd?: string;
  /**
   * Array of public stock market symbols for the company
   */
  stockSymbols?: Array<{
    /**
     * The stock market symbol for the company
     */
    symbol: string;
    /**
     * The stock market exchange for this stock symbol
     */
    exchange: string;
  }>;
  category?: {
    /**
     * Unique identifier for the category
     */
    id: string;
    /**
     * Name of the category
     */
    name: string;
    /**
     * Description of the category
     */
    description: string;
    /**
     * ID of the parent category
     */
    parentCategoryId?: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
  };
  /**
   * Date and time when this record was last updated
   */
  lastUpdatedAt: string;
  competitors?: Array<{
    id: string;
    name: string;
    domain: string;
    /**
     * The logo of the company.
     */
    icon?: string;
  }>;
};

export type CompanyDetail = {
  id: string;
  name: string;
  legalName: string;
  domain: string;
  url?: string;
  description: string;
  /**
   * If false, indicates that the company is active as a brand, even if acquired or merged with another company
   */
  discontinued: boolean;
  /**
   * The logo of the company.
   */
  icon?: string;
  /**
   * The fiscal year end for the company
   */
  fiscalYearEnd?: string;
  /**
   * Array of public stock market symbols for the company
   */
  stockSymbols?: Array<{
    /**
     * The stock market symbol for the company
     */
    symbol: string;
    /**
     * The stock market exchange for this stock symbol
     */
    exchange: string;
  }>;
  category?: {
    /**
     * Unique identifier for the category
     */
    id: string;
    /**
     * Name of the category
     */
    name: string;
    /**
     * Description of the category
     */
    description: string;
    /**
     * ID of the parent category
     */
    parentCategoryId?: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
  };
  productFamilies: Array<{
    /**
     * The ID of the product
     */
    id: string;
    /**
     * The name of the product
     */
    name: string;
    /**
     * Range of prices products in this product family typically sell at
     */
    defaultPriceRange?: {
      min: number;
      max: number;
      /**
       * Currency of the default price range
       */
      currency: string;
    };
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
  }>;
  products: Array<{
    /**
     * The ID of the product
     */
    id: string;
    /**
     * ID of the product family this product is a part of
     */
    productFamilyId?: string;
    /**
     * The name of the product
     */
    name: string;
    /**
     * The description of the product
     */
    description?: string;
    /**
     * The icon of the product
     */
    icon?: string;
    /**
     * URL of the product
     */
    url?: string;
    /**
     * The typical price of the product
     */
    defaultPrice?: number;
    /**
     * Currency of the default price
     */
    currency?: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
  }>;
  /**
   * Range of prices products in this product family typically sell at
   */
  defaultPriceRange?: {
    min: number;
    max: number;
    /**
     * Currency of the default price range
     */
    currency: string;
  };
  learningDataSamples: Array<{
    id: string;
    startDate: string;
    termMonths: number;
    negotiatedPrice: number;
    productNames: Array<string>;
    primaryDimensionName: string;
    primaryDimensionValue: number;
    numberOfOtherDimensions: number;
  }>;
  /**
   * Date and time when this record was last updated
   */
  lastUpdatedAt: string;
  competitors: Array<{
    id: string;
    name: string;
    domain: string;
    /**
     * The logo of the company.
     */
    icon?: string;
  }>;
};

export type ProductSummary = {
  /**
   * The ID of the product
   */
  id: string;
  /**
   * ID of the product family this product is a part of
   */
  productFamilyId?: string;
  /**
   * The name of the product
   */
  name: string;
  /**
   * The description of the product
   */
  description?: string;
  /**
   * The icon of the product
   */
  icon?: string;
  /**
   * URL of the product
   */
  url?: string;
  /**
   * The typical price of the product
   */
  defaultPrice?: number;
  /**
   * Currency of the default price
   */
  currency?: string;
  /**
   * Date and time when this record was last updated
   */
  lastUpdatedAt: string;
};

export type ProductDetail = {
  /**
   * The ID of the product
   */
  id: string;
  /**
   * ID of the product family this product is a part of
   */
  productFamilyId?: string;
  /**
   * The name of the product
   */
  name: string;
  /**
   * The description of the product
   */
  description: string;
  /**
   * The icon of the product
   */
  icon?: string;
  /**
   * The URL of the product
   */
  url?: string;
  pricingDimensions: Array<{
    /**
     * The ID of the dimension.
     */
    id: string;
    /**
     * The name of the dimension.
     */
    name: string;
    /**
     * The description of the dimension.
     */
    description: string;
    /**
     * whether the impact of this dimension on price is clearly known or not
     */
    priceImpactKnown: boolean;
    formField:
      | {
          type: "checkbox";
          label: string;
          readonly: boolean;
          required: boolean;
          defaultValue?: boolean;
          value?: number;
        }
      | {
          type: "number";
          label: string;
          readonly: boolean;
          required: boolean;
          defaultValue?: number;
          /**
           * Minimum allowed value
           */
          min?: number;
          /**
           * Maximum allowed value
           */
          max?: number;
          /**
           * Step increment for number input
           */
          step?: number;
        }
      | {
          type: "select";
          label: string;
          readonly: boolean;
          required: boolean;
          defaultValue?: string;
          /**
           * Available options for select field
           */
          options: Array<{
            label: string;
            value: string;
          }>;
        };
    dependsOn: {
      /**
       * The ID of the dimension that this dimension depends on
       */
      dependsOnDimensionId?: string;
      /**
       * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
       */
      dependency?: "quantity" | "inclusion";
    };
  }>;
  includedFeatures: Array<{
    /**
     * Feature ID
     */
    id: string;
    /**
     * Feature name
     */
    name: string;
    /**
     * Feature description
     */
    description: string;
  }>;
  /**
   * Currency of the default price
   */
  currency?: string;
  /**
   * Date and time when this record was last updated
   */
  lastUpdatedAt: string;
  competitors: Array<{
    companyId: string;
    companyName: string;
    domain: string;
    companyIcon?: string;
    productId: string;
    /**
     * The typical price of the product
     */
    defaultPrice?: number;
    productIcon?: string;
    productUrl?: string;
    productName: string;
    pricingDimensions: Array<{
      /**
       * The ID of the dimension.
       */
      id: string;
      /**
       * The name of the dimension.
       */
      name: string;
      /**
       * The description of the dimension.
       */
      description: string;
      /**
       * whether the impact of this dimension on price is clearly known or not
       */
      priceImpactKnown: boolean;
      formField:
        | {
            type: "checkbox";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: boolean;
            value?: number;
          }
        | {
            type: "number";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: number;
            /**
             * Minimum allowed value
             */
            min?: number;
            /**
             * Maximum allowed value
             */
            max?: number;
            /**
             * Step increment for number input
             */
            step?: number;
          }
        | {
            type: "select";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: string;
            /**
             * Available options for select field
             */
            options: Array<{
              label: string;
              value: string;
            }>;
          };
      dependsOn: {
        /**
         * The ID of the dimension that this dimension depends on
         */
        dependsOnDimensionId?: string;
        /**
         * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
         */
        dependency?: "quantity" | "inclusion";
      };
    }>;
    includedFeatures: Array<{
      /**
       * Feature ID
       */
      id: string;
      /**
       * Feature name
       */
      name: string;
      /**
       * Feature description
       */
      description: string;
    }>;
  }>;
} & {
  /**
   * The typical price of the product
   */
  defaultPrice?: number;
  company: {
    id: string;
    name: string;
    legalName: string;
    domain: string;
  };
  /**
   * The ID of the product
   */
  id: string;
  /**
   * The name of the product
   */
  name: string;
  /**
   * The description of the product
   */
  description: string;
  pricingDimensions: Array<{
    /**
     * The ID of the dimension.
     */
    id: string;
    /**
     * The name of the dimension.
     */
    name: string;
    /**
     * The description of the dimension.
     */
    description: string;
    /**
     * whether the impact of this dimension on price is clearly known or not
     */
    priceImpactKnown: boolean;
    formField:
      | {
          type: "checkbox";
          label: string;
          readonly: boolean;
          required: boolean;
          defaultValue?: boolean;
          value?: number;
        }
      | {
          type: "number";
          label: string;
          readonly: boolean;
          required: boolean;
          defaultValue?: number;
          /**
           * Minimum allowed value
           */
          min?: number;
          /**
           * Maximum allowed value
           */
          max?: number;
          /**
           * Step increment for number input
           */
          step?: number;
        }
      | {
          type: "select";
          label: string;
          readonly: boolean;
          required: boolean;
          defaultValue?: string;
          /**
           * Available options for select field
           */
          options: Array<{
            label: string;
            value: string;
          }>;
        };
    dependsOn: {
      /**
       * The ID of the dimension that this dimension depends on
       */
      dependsOnDimensionId?: string;
      /**
       * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
       */
      dependency?: "quantity" | "inclusion";
    };
  }>;
  includedFeatures: Array<{
    /**
     * Feature ID
     */
    id: string;
    /**
     * Feature name
     */
    name: string;
    /**
     * Feature description
     */
    description: string;
  }>;
  competitors: Array<{
    companyId: string;
    companyName: string;
    domain: string;
    companyIcon?: string;
    productId: string;
    /**
     * The typical price of the product
     */
    defaultPrice?: number;
    productIcon?: string;
    productUrl?: string;
    productName: string;
    pricingDimensions: Array<{
      /**
       * The ID of the dimension.
       */
      id: string;
      /**
       * The name of the dimension.
       */
      name: string;
      /**
       * The description of the dimension.
       */
      description: string;
      /**
       * whether the impact of this dimension on price is clearly known or not
       */
      priceImpactKnown: boolean;
      formField:
        | {
            type: "checkbox";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: boolean;
            value?: number;
          }
        | {
            type: "number";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: number;
            /**
             * Minimum allowed value
             */
            min?: number;
            /**
             * Maximum allowed value
             */
            max?: number;
            /**
             * Step increment for number input
             */
            step?: number;
          }
        | {
            type: "select";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: string;
            /**
             * Available options for select field
             */
            options: Array<{
              label: string;
              value: string;
            }>;
          };
      dependsOn: {
        /**
         * The ID of the dimension that this dimension depends on
         */
        dependsOnDimensionId?: string;
        /**
         * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
         */
        dependency?: "quantity" | "inclusion";
      };
    }>;
    includedFeatures: Array<{
      /**
       * Feature ID
       */
      id: string;
      /**
       * Feature name
       */
      name: string;
      /**
       * Feature description
       */
      description: string;
    }>;
  }>;
};

export type ProductDimension = {
  /**
   * The ID of the dimension.
   */
  id: string;
  /**
   * The name of the dimension.
   */
  name: string;
  /**
   * The description of the dimension.
   */
  description: string;
  /**
   * whether the impact of this dimension on price is clearly known or not
   */
  priceImpactKnown: boolean;
  formField:
    | {
        type: "checkbox";
        label: string;
        readonly: boolean;
        required: boolean;
        defaultValue?: boolean;
        value?: number;
      }
    | {
        type: "number";
        label: string;
        readonly: boolean;
        required: boolean;
        defaultValue?: number;
        /**
         * Minimum allowed value
         */
        min?: number;
        /**
         * Maximum allowed value
         */
        max?: number;
        /**
         * Step increment for number input
         */
        step?: number;
      }
    | {
        type: "select";
        label: string;
        readonly: boolean;
        required: boolean;
        defaultValue?: string;
        /**
         * Available options for select field
         */
        options: Array<{
          label: string;
          value: string;
        }>;
      };
  dependsOn: {
    /**
     * The ID of the dimension that this dimension depends on
     */
    dependsOnDimensionId?: string;
    /**
     * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
     */
    dependency?: "quantity" | "inclusion";
  };
};

export type BasicPriceResponse = {
  estimate: {
    /**
     * 25th percentile price estimate
     */
    percentile25: number;
    /**
     * 50th percentile price estimate (median)
     */
    percentile50: number;
    /**
     * 75th percentile price estimate
     */
    percentile75: number;
  };
  /**
   * Currency code (ISO 4217)
   */
  currency: string;
  /**
   * Timestamp when this estimate was generated
   */
  timestamp: string;
};

export type AdvancedPriceResponse = {
  /**
   * Price estimate distribution at 5 percentile increments
   */
  estimate: {
    /**
     * 10th percentile price estimate
     */
    percentile10: number;
    /**
     * 15th percentile price estimate
     */
    percentile15: number;
    /**
     * 20th percentile price estimate
     */
    percentile20: number;
    /**
     * 25th percentile price estimate
     */
    percentile25: number;
    /**
     * 30th percentile price estimate
     */
    percentile30: number;
    /**
     * 35th percentile price estimate
     */
    percentile35: number;
    /**
     * 40th percentile price estimate
     */
    percentile40: number;
    /**
     * 45th percentile price estimate
     */
    percentile45: number;
    /**
     * 50th percentile price estimate (median)
     */
    percentile50: number;
    /**
     * 55th percentile price estimate
     */
    percentile55: number;
    /**
     * 60th percentile price estimate
     */
    percentile60: number;
    /**
     * 65th percentile price estimate
     */
    percentile65: number;
    /**
     * 70th percentile price estimate
     */
    percentile70: number;
    /**
     * 75th percentile price estimate
     */
    percentile75: number;
    /**
     * 80th percentile price estimate
     */
    percentile80: number;
    /**
     * 85th percentile price estimate
     */
    percentile85: number;
    /**
     * 90th percentile price estimate
     */
    percentile90: number;
  };
  /**
   * Product level price estimate distributions
   */
  productEstimates: Array<
    | {
        status: "success";
        /**
         * Whether the product estimate was defaulted to a fallback
         */
        defaulted: boolean;
        /**
         * Price estimate distribution at 5 percentile increments
         */
        estimate: {
          /**
           * 10th percentile price estimate
           */
          percentile10: number;
          /**
           * 15th percentile price estimate
           */
          percentile15: number;
          /**
           * 20th percentile price estimate
           */
          percentile20: number;
          /**
           * 25th percentile price estimate
           */
          percentile25: number;
          /**
           * 30th percentile price estimate
           */
          percentile30: number;
          /**
           * 35th percentile price estimate
           */
          percentile35: number;
          /**
           * 40th percentile price estimate
           */
          percentile40: number;
          /**
           * 45th percentile price estimate
           */
          percentile45: number;
          /**
           * 50th percentile price estimate (median)
           */
          percentile50: number;
          /**
           * 55th percentile price estimate
           */
          percentile55: number;
          /**
           * 60th percentile price estimate
           */
          percentile60: number;
          /**
           * 65th percentile price estimate
           */
          percentile65: number;
          /**
           * 70th percentile price estimate
           */
          percentile70: number;
          /**
           * 75th percentile price estimate
           */
          percentile75: number;
          /**
           * 80th percentile price estimate
           */
          percentile80: number;
          /**
           * 85th percentile price estimate
           */
          percentile85: number;
          /**
           * 90th percentile price estimate
           */
          percentile90: number;
        };
        /**
         * Name of the product
         */
        name: string;
        /**
         * ID of the product
         */
        productId: string;
      }
    | {
        status: "error";
        code: "pricing_failed" | "validation_failed";
        /**
         * Whether the product estimate was defaulted to a fallback, that then failed
         */
        defaulted: boolean;
        /**
         * Error message
         */
        message: string;
        /**
         * Name of the product
         */
        name: string;
        /**
         * ID of the product
         */
        productId: string;
      }
  >;
  /**
   * Currency code (ISO 4217)
   */
  currency: string;
  /**
   * Timestamp when this estimate was generated
   */
  timestamp: string;
};

export type ScopeCreate = {
  /**
   * Id of the previous scope this replaced
   */
  previousScopeId?: string;
  /**
   * Terms of purchase that apply to the whole scope
   */
  scopeTerms: Array<{
    /**
     * Length of the term in months
     */
    termLength: number;
    /**
     * Whether the scope is a new purchase or a renewal.
     */
    purchaseType: "new_purchase" | "renewal";
    /**
     * Whether the scope has a auto-renewal clause or not
     */
    autoRenew?: boolean;
    /**
     * Start date of the scope
     */
    startDate?: string;
    /**
     * End date of the scope
     */
    endDate?: string;
    /**
     * List price of the scope
     */
    listPrice?: number;
    /**
     * Discount on the list price
     */
    discount?: number;
    /**
     * Final price of the scope after discount
     */
    finalPrice?: number;
  }>;
  /**
   * Terms of purchase that apply to specific products, including the dimension values for each product
   */
  productTerms: Array<{
    /**
     * Id of the product the term applies to.
     */
    productId: string;
    /**
     * Dimensions that impact the price of the product
     */
    pricingDimensions: Array<{
      /**
       * Dimension ID
       */
      id: string;
      /**
       * Value for this dimension
       */
      value: number;
    }>;
    /**
     * Product specific start date
     */
    startDate?: string;
    /**
     * Product specific end date
     */
    endDate?: string;
    /**
     * Product specific list price
     */
    listPrice?: number;
    /**
     * Product specific discount
     */
    discount?: number;
    /**
     * Product specific final price after applying discount on product list price
     */
    finalPrice?: number;
  }>;
};

export type ScopeDetail = {
  /**
   * ID of the scope
   */
  id: string;
  /**
   * Type of data source for this scope, can be either 'manual' or 'document'
   */
  source: "manual" | "document";
  /**
   * Date and time the scope was created
   */
  createdOn: string;
  /**
   * ID of the previous scope to this scope (if any)
   */
  previousScopeId?: string;
  /**
   * ID of the next scope to this scope (if any)
   */
  nextScopeId?: string;
  /**
   * Document processing details, when relevant
   */
  documentProcessing?: {
    /**
     * Current status of document processing
     */
    status: "pending" | "processing" | "completed" | "failed";
    /**
     * Original filename of the document
     */
    filename: string;
    /**
     * Detected document type
     */
    documentType: "order_form" | "contract" | "other";
    /**
     * MIME type of the document
     */
    mimeType: string;
    /**
     * Error message if processing failed
     */
    error?: string;
    /**
     * When the processing status was last updated
     */
    updatedAt: string;
  };
  /**
   * Terms of purchase that apply to the whole scope
   */
  scopeTerms: Array<{
    /**
     * Length of the term in months
     */
    termLength: number;
    /**
     * Whether the scope is a new purchase or a renewal.
     */
    purchaseType: "new_purchase" | "renewal";
    /**
     * List price of the scope
     */
    listPrice?: number;
    /**
     * Discount on the list price
     */
    discount?: number;
    /**
     * Final price of the scope after discount
     */
    finalPrice?: number;
  }>;
  /**
   * Terms of purchase that apply to specific products, including the dimension values for each product
   */
  productTerms: Array<{
    /**
     * Product ID
     */
    productId: string;
    /**
     * Name of the product
     */
    productName: string;
    /**
     * ID of the product family
     */
    productFamilyId?: string;
    /**
     * Product description
     */
    description?: string;
    /**
     * Icon of the product
     */
    icon?: string;
    /**
     * URL of the product
     */
    url?: string;
    /**
     * Dimensions that impact the price of the product
     */
    pricingDimensions: Array<{
      /**
       * ID of the dimension
       */
      id: string;
      /**
       * Name of the dimension
       */
      name: string;
      /**
       * Description of the dimension
       */
      description?: string;
      /**
       * Value of the dimension
       */
      value?: number;
    }>;
    /**
     * Add-on features generally included at no additional cost
     */
    includedFeatures: Array<{
      /**
       * ID of the feature
       */
      id: string;
      /**
       * Name of the feature
       */
      name: string;
      /**
       * Description of the feature
       */
      description?: string;
    }>;
    listPrice?: number;
    discount?: number;
    finalPrice?: number;
  }>;
};

export type WebhookCreateResponse = {
  /**
   * The ID of the webhook
   */
  id: string;
  /**
   * The URL where webhook events will be sent
   */
  url: string;
  /**
   * List of events to subscribe to
   */
  events: Array<"scope.extracted">;
  /**
   * The secret used to sign webhook events
   */
  secret?: string;
};

export type WebhookCreateRequest = {
  url: string;
  events: Array<"scope.extracted">;
};

export type WebhookListResponse = Array<{
  id: string;
  url: string;
  events: Array<string>;
}>;

export type WebhookEventListResponse = Array<{
  id: string;
  attempts: number;
  responseStatus: number;
  lastAttemptAt: string;
  nextAttemptAt: string;
  successfulAt: string;
  updatedAt: string;
  createdAt: string;
  status: string;
}>;

export type WebhookDeleteResponse = {
  id: string;
};

export type WebhookEventDetailResponse = {
  id: string;
  attempts: number;
  responseStatus: number;
  lastAttemptAt: string;
  nextAttemptAt: string;
  successfulAt: string;
  updatedAt: string;
  createdAt: string;
  status: string;
  data: {
    headers: {
      [key: string]: string;
    };
    body: {
      eventType: "scope.extracted";
      data: {
        scopeId: string;
        status: "completed" | "failed";
        errorMessage?: string;
      };
    };
    query: string;
    parsedQuery: {
      [key: string]: unknown;
    };
    path: string;
  };
};

export type HealthCheckResponse = {
  /**
   * Current health status of the API
   */
  status: "ok" | "degraded" | "error";
  /**
   * ISO timestamp of when the health check was performed
   */
  timestamp: string;
  /**
   * Version of the API
   */
  version: string;
  /**
   * Array of services and their health status
   */
  services: Array<{
    /**
     * Name of the service
     */
    name: string;
    /**
     * Current health status of the service
     */
    status: "ok" | "degraded" | "error";
  }>;
};

export type Pagination = {
  total: number;
  limit: number;
  offset: number;
};

export type _Error = {
  /**
   * HTTP status type
   */
  type?: string;
  /**
   * HTTP status code
   */
  status: number;
  /**
   * HTTP status title
   */
  title: string;
  /**
   * Human-readable description of the error
   */
  detail: string;
  instance?: string;
  trace?: {
    timestamp?: string;
    requestId?: string;
    buildId?: string;
    rayId?: string;
  };
};

export type IntentSummary = {
  id: string;
  userDetails: {
    companyName: string;
    domain: string;
    countryCode?: string;
    city?: string;
    region?: string;
    sector?: string;
    headcount?: number;
    estimatedRevenue?: number;
    estimatedRevenueRawValue?: string;
  };
  timestamp: string;
  event:
    | {
        engagementType: "price-estimate";
        product?: {
          /**
           * The ID of the product
           */
          id: string;
          /**
           * ID of the product family this product is a part of
           */
          productFamilyId?: string;
          /**
           * The name of the product
           */
          name: string;
          /**
           * The description of the product
           */
          description?: string;
          /**
           * The icon of the product
           */
          icon?: string;
          /**
           * URL of the product
           */
          url?: string;
          /**
           * The typical price of the product
           */
          defaultPrice?: number;
          /**
           * Currency of the default price
           */
          currency?: string;
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        company: {
          id: string;
          name: string;
          legalName: string;
          domain: string;
          url?: string;
          description: string;
          /**
           * If false, indicates that the company is active as a brand, even if acquired or merged with another company
           */
          discontinued: boolean;
          /**
           * The logo of the company.
           */
          icon?: string;
          /**
           * The fiscal year end for the company
           */
          fiscalYearEnd?: string;
          /**
           * Array of public stock market symbols for the company
           */
          stockSymbols?: Array<{
            /**
             * The stock market symbol for the company
             */
            symbol: string;
            /**
             * The stock market exchange for this stock symbol
             */
            exchange: string;
          }>;
          category?: {
            /**
             * Unique identifier for the category
             */
            id: string;
            /**
             * Name of the category
             */
            name: string;
            /**
             * Description of the category
             */
            description: string;
            /**
             * ID of the parent category
             */
            parentCategoryId?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        requestedOn: string;
        /**
         * Price estimate distribution at 5 percentile increments
         */
        estimate: {
          /**
           * 10th percentile price estimate
           */
          percentile10?: number;
          /**
           * 15th percentile price estimate
           */
          percentile15?: number;
          /**
           * 20th percentile price estimate
           */
          percentile20?: number;
          /**
           * 25th percentile price estimate
           */
          percentile25?: number;
          /**
           * 30th percentile price estimate
           */
          percentile30?: number;
          /**
           * 35th percentile price estimate
           */
          percentile35?: number;
          /**
           * 40th percentile price estimate
           */
          percentile40?: number;
          /**
           * 45th percentile price estimate
           */
          percentile45?: number;
          /**
           * 50th percentile price estimate (median)
           */
          percentile50?: number;
          /**
           * 55th percentile price estimate
           */
          percentile55?: number;
          /**
           * 60th percentile price estimate
           */
          percentile60?: number;
          /**
           * 65th percentile price estimate
           */
          percentile65?: number;
          /**
           * 70th percentile price estimate
           */
          percentile70?: number;
          /**
           * 75th percentile price estimate
           */
          percentile75?: number;
          /**
           * 80th percentile price estimate
           */
          percentile80?: number;
          /**
           * 85th percentile price estimate
           */
          percentile85?: number;
          /**
           * 90th percentile price estimate
           */
          percentile90?: number;
        };
        /**
         * Product level price estimate distributions
         */
        productEstimates?: Array<
          | {
              status: "success";
              /**
               * Whether the product estimate was defaulted to a fallback
               */
              defaulted: boolean;
              /**
               * Price estimate distribution at 5 percentile increments
               */
              estimate: {
                /**
                 * 10th percentile price estimate
                 */
                percentile10: number;
                /**
                 * 15th percentile price estimate
                 */
                percentile15: number;
                /**
                 * 20th percentile price estimate
                 */
                percentile20: number;
                /**
                 * 25th percentile price estimate
                 */
                percentile25: number;
                /**
                 * 30th percentile price estimate
                 */
                percentile30: number;
                /**
                 * 35th percentile price estimate
                 */
                percentile35: number;
                /**
                 * 40th percentile price estimate
                 */
                percentile40: number;
                /**
                 * 45th percentile price estimate
                 */
                percentile45: number;
                /**
                 * 50th percentile price estimate (median)
                 */
                percentile50: number;
                /**
                 * 55th percentile price estimate
                 */
                percentile55: number;
                /**
                 * 60th percentile price estimate
                 */
                percentile60: number;
                /**
                 * 65th percentile price estimate
                 */
                percentile65: number;
                /**
                 * 70th percentile price estimate
                 */
                percentile70: number;
                /**
                 * 75th percentile price estimate
                 */
                percentile75: number;
                /**
                 * 80th percentile price estimate
                 */
                percentile80: number;
                /**
                 * 85th percentile price estimate
                 */
                percentile85: number;
                /**
                 * 90th percentile price estimate
                 */
                percentile90: number;
              };
              /**
               * Name of the product
               */
              name: string;
              /**
               * ID of the product
               */
              productId: string;
            }
          | {
              status: "error";
              code: "pricing_failed" | "validation_failed";
              /**
               * Whether the product estimate was defaulted to a fallback, that then failed
               */
              defaulted: boolean;
              /**
               * Error message
               */
              message: string;
              /**
               * Name of the product
               */
              name: string;
              /**
               * ID of the product
               */
              productId: string;
            }
        >;
        /**
         * Currency code (ISO 4217)
         */
        currency?: string;
        /**
         * Timestamp when this estimate was generated
         */
        timestamp?: string;
      }
    | {
        engagementType: "price-check";
        product?: {
          /**
           * The ID of the product
           */
          id: string;
          /**
           * ID of the product family this product is a part of
           */
          productFamilyId?: string;
          /**
           * The name of the product
           */
          name: string;
          /**
           * The description of the product
           */
          description?: string;
          /**
           * The icon of the product
           */
          icon?: string;
          /**
           * URL of the product
           */
          url?: string;
          /**
           * The typical price of the product
           */
          defaultPrice?: number;
          /**
           * Currency of the default price
           */
          currency?: string;
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        company: {
          id: string;
          name: string;
          legalName: string;
          domain: string;
          url?: string;
          description: string;
          /**
           * If false, indicates that the company is active as a brand, even if acquired or merged with another company
           */
          discontinued: boolean;
          /**
           * The logo of the company.
           */
          icon?: string;
          /**
           * The fiscal year end for the company
           */
          fiscalYearEnd?: string;
          /**
           * Array of public stock market symbols for the company
           */
          stockSymbols?: Array<{
            /**
             * The stock market symbol for the company
             */
            symbol: string;
            /**
             * The stock market exchange for this stock symbol
             */
            exchange: string;
          }>;
          category?: {
            /**
             * Unique identifier for the category
             */
            id: string;
            /**
             * Name of the category
             */
            name: string;
            /**
             * Description of the category
             */
            description: string;
            /**
             * ID of the parent category
             */
            parentCategoryId?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        /**
         * Whether the price check is for a new purchase or a renewal.
         */
        purchaseType: "new_purchase" | "renewal";
        /**
         * The date of the renewal estimate.
         */
        estimateRenewalDate?: string;
        /**
         * The approximate range for the estimated contract value.
         */
        estimateContractValueRange?: {
          /**
           * The minimum estimated contract value.
           */
          min: number;
          /**
           * The maximum estimated contract value.
           */
          max: number;
        };
        requestedOn: string;
      }
    | {
        engagementType: "catalog-view-verified";
        product?: {
          /**
           * The ID of the product
           */
          id: string;
          /**
           * ID of the product family this product is a part of
           */
          productFamilyId?: string;
          /**
           * The name of the product
           */
          name: string;
          /**
           * The description of the product
           */
          description?: string;
          /**
           * The icon of the product
           */
          icon?: string;
          /**
           * URL of the product
           */
          url?: string;
          /**
           * The typical price of the product
           */
          defaultPrice?: number;
          /**
           * Currency of the default price
           */
          currency?: string;
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        company: {
          id: string;
          name: string;
          legalName: string;
          domain: string;
          url?: string;
          description: string;
          /**
           * If false, indicates that the company is active as a brand, even if acquired or merged with another company
           */
          discontinued: boolean;
          /**
           * The logo of the company.
           */
          icon?: string;
          /**
           * The fiscal year end for the company
           */
          fiscalYearEnd?: string;
          /**
           * Array of public stock market symbols for the company
           */
          stockSymbols?: Array<{
            /**
             * The stock market symbol for the company
             */
            symbol: string;
            /**
             * The stock market exchange for this stock symbol
             */
            exchange: string;
          }>;
          category?: {
            /**
             * Unique identifier for the category
             */
            id: string;
            /**
             * Name of the category
             */
            name: string;
            /**
             * Description of the category
             */
            description: string;
            /**
             * ID of the parent category
             */
            parentCategoryId?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        viewedAt: string;
        totalDailyVisits?: number;
      }
    | {
        engagementType: "catalog-view";
        product?: {
          /**
           * The ID of the product
           */
          id: string;
          /**
           * ID of the product family this product is a part of
           */
          productFamilyId?: string;
          /**
           * The name of the product
           */
          name: string;
          /**
           * The description of the product
           */
          description?: string;
          /**
           * The icon of the product
           */
          icon?: string;
          /**
           * URL of the product
           */
          url?: string;
          /**
           * The typical price of the product
           */
          defaultPrice?: number;
          /**
           * Currency of the default price
           */
          currency?: string;
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        company: {
          id: string;
          name: string;
          legalName: string;
          domain: string;
          url?: string;
          description: string;
          /**
           * If false, indicates that the company is active as a brand, even if acquired or merged with another company
           */
          discontinued: boolean;
          /**
           * The logo of the company.
           */
          icon?: string;
          /**
           * The fiscal year end for the company
           */
          fiscalYearEnd?: string;
          /**
           * Array of public stock market symbols for the company
           */
          stockSymbols?: Array<{
            /**
             * The stock market symbol for the company
             */
            symbol: string;
            /**
             * The stock market exchange for this stock symbol
             */
            exchange: string;
          }>;
          category?: {
            /**
             * Unique identifier for the category
             */
            id: string;
            /**
             * Name of the category
             */
            name: string;
            /**
             * Description of the category
             */
            description: string;
            /**
             * ID of the parent category
             */
            parentCategoryId?: string;
            /**
             * Date and time when this record was last updated
             */
            lastUpdatedAt: string;
          };
          /**
           * Date and time when this record was last updated
           */
          lastUpdatedAt: string;
        };
        viewedAt: string;
        totalDailyVisits?: number;
      };
  origin?: string;
};

export type TrackRequest = {
  /**
   * ID of the company you're tracking intent for.
   */
  companyId?: string;
  /**
   * ID of the product you're tracking intent for.
   */
  productId?: string;
  /**
   * ID of the scope you're tracking intent for.
   */
  scopeId?: string;
  /**
   * The engagement type that is being tracked.
   */
  engagementType:
    | "price_estimate"
    | "price_check"
    | "catalog_view_verified"
    | "catalog_view";
  /**
   * The url that is being tracked.
   */
  url?: string;
  /**
   * An identifier for the end user being tracked.
   */
  endUserIdentifier?: string;
  /**
   * The IP address of the end user being tracked.
   */
  endUserIp?: string;
  /**
   * The email address of the end user being tracked.
   */
  endUserEmail?: string;
  /**
   * The organization identifier of the end user being tracked.
   */
  endUserOrganizationIdentifier?: string;
  /**
   * The source from where the intent is being tracked.
   */
  source?: string;
};

export type LearningDataSample = {
  id: string;
  startDate: string;
  termMonths: number;
  negotiatedPrice: number;
  productNames: Array<string>;
  primaryDimensionName: string;
  primaryDimensionValue: number;
  numberOfOtherDimensions: number;
};

/**
 * Unique identifier for the end user
 */
export type EndUserIdentifier = string;

/**
 * IP address of the end user
 */
export type EndUserIp = string;

/**
 * Email address of the end user
 */
export type EndUserEmail = string;

/**
 * Unique identifier for the end user's organization
 */
export type EndUserOrganizationIdentifier = string;

export type GetCompanyData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the company to retrieve
     */
    companyId: string;
  };
  query?: never;
  url: "/v1/catalog/companies/{companyId}";
};

export type GetCompanyErrors = {
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Company not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetCompanyError = GetCompanyErrors[keyof GetCompanyErrors];

export type GetCompanyResponses = {
  /**
   * Successful operation
   */
  200: {
    id: string;
    name: string;
    legalName: string;
    domain: string;
    url?: string;
    description: string;
    /**
     * If false, indicates that the company is active as a brand, even if acquired or merged with another company
     */
    discontinued: boolean;
    /**
     * The logo of the company.
     */
    icon?: string;
    /**
     * The fiscal year end for the company
     */
    fiscalYearEnd?: string;
    /**
     * Array of public stock market symbols for the company
     */
    stockSymbols?: Array<{
      /**
       * The stock market symbol for the company
       */
      symbol: string;
      /**
       * The stock market exchange for this stock symbol
       */
      exchange: string;
    }>;
    category?: {
      /**
       * Unique identifier for the category
       */
      id: string;
      /**
       * Name of the category
       */
      name: string;
      /**
       * Description of the category
       */
      description: string;
      /**
       * ID of the parent category
       */
      parentCategoryId?: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
    };
    productFamilies: Array<{
      /**
       * The ID of the product
       */
      id: string;
      /**
       * The name of the product
       */
      name: string;
      /**
       * Range of prices products in this product family typically sell at
       */
      defaultPriceRange?: {
        min: number;
        max: number;
        /**
         * Currency of the default price range
         */
        currency: string;
      };
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
    }>;
    products: Array<{
      /**
       * The ID of the product
       */
      id: string;
      /**
       * ID of the product family this product is a part of
       */
      productFamilyId?: string;
      /**
       * The name of the product
       */
      name: string;
      /**
       * The description of the product
       */
      description?: string;
      /**
       * The icon of the product
       */
      icon?: string;
      /**
       * URL of the product
       */
      url?: string;
      /**
       * The typical price of the product
       */
      defaultPrice?: number;
      /**
       * Currency of the default price
       */
      currency?: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
    }>;
    /**
     * Range of prices products in this product family typically sell at
     */
    defaultPriceRange?: {
      min: number;
      max: number;
      /**
       * Currency of the default price range
       */
      currency: string;
    };
    learningDataSamples: Array<{
      id: string;
      startDate: string;
      termMonths: number;
      negotiatedPrice: number;
      productNames: Array<string>;
      primaryDimensionName: string;
      primaryDimensionValue: number;
      numberOfOtherDimensions: number;
    }>;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
    competitors: Array<{
      id: string;
      name: string;
      domain: string;
      /**
       * The logo of the company.
       */
      icon?: string;
    }>;
  };
};

export type GetCompanyResponse = GetCompanyResponses[keyof GetCompanyResponses];

export type GetProductFamilyData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the product family to retrieve
     */
    productFamilyId: string;
  };
  query?: never;
  url: "/v1/catalog/product-families/{productFamilyId}";
};

export type GetProductFamilyErrors = {
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Company not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetProductFamilyError =
  GetProductFamilyErrors[keyof GetProductFamilyErrors];

export type GetProductFamilyResponses = {
  /**
   * Successful operation
   */
  200: {
    /**
     * The ID of the product family
     */
    id: string;
    /**
     * The name of the product family
     */
    name: string;
    /**
     * Range of prices products in this product family typically sell at
     */
    defaultPriceRange?: {
      min: number;
      max: number;
      /**
       * Currency of the default price range
       */
      currency: string;
    };
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
    products?: Array<{
      /**
       * The ID of the product
       */
      id: string;
      /**
       * ID of the product family this product is a part of
       */
      productFamilyId?: string;
      /**
       * The name of the product
       */
      name: string;
      /**
       * The description of the product
       */
      description?: string;
      /**
       * The icon of the product
       */
      icon?: string;
      /**
       * URL of the product
       */
      url?: string;
      /**
       * The typical price of the product
       */
      defaultPrice?: number;
      /**
       * Currency of the default price
       */
      currency?: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
    }>;
  };
};

export type GetProductFamilyResponse =
  GetProductFamilyResponses[keyof GetProductFamilyResponses];

export type GetProductData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the product to retrieve
     */
    productId: string;
  };
  query?: never;
  url: "/v1/catalog/products/{productId}";
};

export type GetProductErrors = {
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Product not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetProductError = GetProductErrors[keyof GetProductErrors];

export type GetProductResponses = {
  /**
   * Successful operation
   */
  200: {
    /**
     * The ID of the product
     */
    id: string;
    /**
     * ID of the product family this product is a part of
     */
    productFamilyId?: string;
    /**
     * The name of the product
     */
    name: string;
    /**
     * The description of the product
     */
    description: string;
    /**
     * The icon of the product
     */
    icon?: string;
    /**
     * The URL of the product
     */
    url?: string;
    pricingDimensions: Array<{
      /**
       * The ID of the dimension.
       */
      id: string;
      /**
       * The name of the dimension.
       */
      name: string;
      /**
       * The description of the dimension.
       */
      description: string;
      /**
       * whether the impact of this dimension on price is clearly known or not
       */
      priceImpactKnown: boolean;
      formField:
        | {
            type: "checkbox";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: boolean;
            value?: number;
          }
        | {
            type: "number";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: number;
            /**
             * Minimum allowed value
             */
            min?: number;
            /**
             * Maximum allowed value
             */
            max?: number;
            /**
             * Step increment for number input
             */
            step?: number;
          }
        | {
            type: "select";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: string;
            /**
             * Available options for select field
             */
            options: Array<{
              label: string;
              value: string;
            }>;
          };
      dependsOn: {
        /**
         * The ID of the dimension that this dimension depends on
         */
        dependsOnDimensionId?: string;
        /**
         * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
         */
        dependency?: "quantity" | "inclusion";
      };
    }>;
    includedFeatures: Array<{
      /**
       * Feature ID
       */
      id: string;
      /**
       * Feature name
       */
      name: string;
      /**
       * Feature description
       */
      description: string;
    }>;
    /**
     * Currency of the default price
     */
    currency?: string;
    /**
     * Date and time when this record was last updated
     */
    lastUpdatedAt: string;
    competitors: Array<{
      companyId: string;
      companyName: string;
      domain: string;
      companyIcon?: string;
      productId: string;
      /**
       * The typical price of the product
       */
      defaultPrice?: number;
      productIcon?: string;
      productUrl?: string;
      productName: string;
      pricingDimensions: Array<{
        /**
         * The ID of the dimension.
         */
        id: string;
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The description of the dimension.
         */
        description: string;
        /**
         * whether the impact of this dimension on price is clearly known or not
         */
        priceImpactKnown: boolean;
        formField:
          | {
              type: "checkbox";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: boolean;
              value?: number;
            }
          | {
              type: "number";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: number;
              /**
               * Minimum allowed value
               */
              min?: number;
              /**
               * Maximum allowed value
               */
              max?: number;
              /**
               * Step increment for number input
               */
              step?: number;
            }
          | {
              type: "select";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: string;
              /**
               * Available options for select field
               */
              options: Array<{
                label: string;
                value: string;
              }>;
            };
        dependsOn: {
          /**
           * The ID of the dimension that this dimension depends on
           */
          dependsOnDimensionId?: string;
          /**
           * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
           */
          dependency?: "quantity" | "inclusion";
        };
      }>;
      includedFeatures: Array<{
        /**
         * Feature ID
         */
        id: string;
        /**
         * Feature name
         */
        name: string;
        /**
         * Feature description
         */
        description: string;
      }>;
    }>;
  } & {
    /**
     * The typical price of the product
     */
    defaultPrice?: number;
    company: {
      id: string;
      name: string;
      legalName: string;
      domain: string;
    };
    /**
     * The ID of the product
     */
    id: string;
    /**
     * The name of the product
     */
    name: string;
    /**
     * The description of the product
     */
    description: string;
    pricingDimensions: Array<{
      /**
       * The ID of the dimension.
       */
      id: string;
      /**
       * The name of the dimension.
       */
      name: string;
      /**
       * The description of the dimension.
       */
      description: string;
      /**
       * whether the impact of this dimension on price is clearly known or not
       */
      priceImpactKnown: boolean;
      formField:
        | {
            type: "checkbox";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: boolean;
            value?: number;
          }
        | {
            type: "number";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: number;
            /**
             * Minimum allowed value
             */
            min?: number;
            /**
             * Maximum allowed value
             */
            max?: number;
            /**
             * Step increment for number input
             */
            step?: number;
          }
        | {
            type: "select";
            label: string;
            readonly: boolean;
            required: boolean;
            defaultValue?: string;
            /**
             * Available options for select field
             */
            options: Array<{
              label: string;
              value: string;
            }>;
          };
      dependsOn: {
        /**
         * The ID of the dimension that this dimension depends on
         */
        dependsOnDimensionId?: string;
        /**
         * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
         */
        dependency?: "quantity" | "inclusion";
      };
    }>;
    includedFeatures: Array<{
      /**
       * Feature ID
       */
      id: string;
      /**
       * Feature name
       */
      name: string;
      /**
       * Feature description
       */
      description: string;
    }>;
    competitors: Array<{
      companyId: string;
      companyName: string;
      domain: string;
      companyIcon?: string;
      productId: string;
      /**
       * The typical price of the product
       */
      defaultPrice?: number;
      productIcon?: string;
      productUrl?: string;
      productName: string;
      pricingDimensions: Array<{
        /**
         * The ID of the dimension.
         */
        id: string;
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The description of the dimension.
         */
        description: string;
        /**
         * whether the impact of this dimension on price is clearly known or not
         */
        priceImpactKnown: boolean;
        formField:
          | {
              type: "checkbox";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: boolean;
              value?: number;
            }
          | {
              type: "number";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: number;
              /**
               * Minimum allowed value
               */
              min?: number;
              /**
               * Maximum allowed value
               */
              max?: number;
              /**
               * Step increment for number input
               */
              step?: number;
            }
          | {
              type: "select";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: string;
              /**
               * Available options for select field
               */
              options: Array<{
                label: string;
                value: string;
              }>;
            };
        dependsOn: {
          /**
           * The ID of the dimension that this dimension depends on
           */
          dependsOnDimensionId?: string;
          /**
           * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
           */
          dependency?: "quantity" | "inclusion";
        };
      }>;
      includedFeatures: Array<{
        /**
         * Feature ID
         */
        id: string;
        /**
         * Feature name
         */
        name: string;
        /**
         * Feature description
         */
        description: string;
      }>;
    }>;
  };
};

export type GetProductResponse = GetProductResponses[keyof GetProductResponses];

export type ListCategoriesData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path?: never;
  query?: {
    /**
     * Maximum number of categories to return
     */
    limit?: number;
    /**
     * Number of categories to skip
     */
    offset?: number;
    /**
     * Filter by parent category ID
     */
    parentCategoryId?: string;
    /**
     * Field to sort by
     */
    sortBy?: "name";
    /**
     * Sort order
     */
    sortOrder?: "asc" | "desc";
  };
  url: "/v1/catalog/categories";
};

export type ListCategoriesErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type ListCategoriesError =
  ListCategoriesErrors[keyof ListCategoriesErrors];

export type ListCategoriesResponses = {
  /**
   * Successful operation
   */
  200: {
    data: Array<{
      /**
       * Unique identifier for the category
       */
      id: string;
      /**
       * Name of the category
       */
      name: string;
      /**
       * Description of the category
       */
      description: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
      /**
       * Array of child categories
       */
      childCategories?: Array<{
        /**
         * Unique identifier for the category
         */
        id: string;
        /**
         * Name of the category
         */
        name: string;
        /**
         * Description of the category
         */
        description: string;
        /**
         * Date and time when this record was last updated
         */
        lastUpdatedAt: string;
      }>;
    }>;
    pagination: {
      total: number;
      limit: number;
      offset: number;
    };
  };
};

export type ListCategoriesResponse =
  ListCategoriesResponses[keyof ListCategoriesResponses];

export type ListCompaniesData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path?: never;
  query?: {
    /**
     * Filter by company name (partial match)
     */
    name?: string;
    /**
     * Filter by company domain
     */
    domain?: string;
    /**
     * Filter by category ID
     */
    categoryId?: string;
    /**
     * Maximum number of companies to return
     */
    limit?: number;
    /**
     * Number of companies to skip
     */
    offset?: number;
    /**
     * Field to sort by
     */
    sortBy?: "name";
    /**
     * Sort order
     */
    sortOrder?: "asc" | "desc";
    /**
     * A string of comma separated company ids.
     */
    ids?: Array<string>;
  };
  url: "/v1/catalog/companies";
};

export type ListCompaniesErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type ListCompaniesError = ListCompaniesErrors[keyof ListCompaniesErrors];

export type ListCompaniesResponses = {
  /**
   * Successful operation
   */
  200: {
    data: Array<{
      id: string;
      name: string;
      legalName: string;
      domain: string;
      url?: string;
      description: string;
      /**
       * If false, indicates that the company is active as a brand, even if acquired or merged with another company
       */
      discontinued: boolean;
      /**
       * The logo of the company.
       */
      icon?: string;
      /**
       * The fiscal year end for the company
       */
      fiscalYearEnd?: string;
      /**
       * Array of public stock market symbols for the company
       */
      stockSymbols?: Array<{
        /**
         * The stock market symbol for the company
         */
        symbol: string;
        /**
         * The stock market exchange for this stock symbol
         */
        exchange: string;
      }>;
      category?: {
        /**
         * Unique identifier for the category
         */
        id: string;
        /**
         * Name of the category
         */
        name: string;
        /**
         * Description of the category
         */
        description: string;
        /**
         * ID of the parent category
         */
        parentCategoryId?: string;
        /**
         * Date and time when this record was last updated
         */
        lastUpdatedAt: string;
      };
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
      competitors?: Array<{
        id: string;
        name: string;
        domain: string;
        /**
         * The logo of the company.
         */
        icon?: string;
      }>;
    }>;
    pagination: {
      total: number;
      limit: number;
      offset: number;
    };
  };
};

export type ListCompaniesResponse =
  ListCompaniesResponses[keyof ListCompaniesResponses];

export type ListProductFamiliesData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the company to retrieve
     */
    companyId: string;
  };
  query?: {
    /**
     * A string of comma separated product family ids.
     */
    ids?: Array<string>;
    /**
     * Maximum number of companies to return
     */
    limit?: number;
    /**
     * Number of companies to skip
     */
    offset?: number;
    /**
     * Field to sort by
     */
    sortBy?: "name" | "sortOrder";
    /**
     * Sort order
     */
    sortOrder?: "asc" | "desc";
  };
  url: "/v1/catalog/companies/{companyId}/product-families";
};

export type ListProductFamiliesErrors = {
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Company not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type ListProductFamiliesError =
  ListProductFamiliesErrors[keyof ListProductFamiliesErrors];

export type ListProductFamiliesResponses = {
  /**
   * Successful operation
   */
  200: {
    data: Array<{
      /**
       * The ID of the product family
       */
      id: string;
      /**
       * The name of the product family
       */
      name: string;
      /**
       * Range of prices products in this product family typically sell at
       */
      defaultPriceRange?: {
        min: number;
        max: number;
        /**
         * Currency of the default price range
         */
        currency: string;
      };
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
      products?: Array<{
        /**
         * The ID of the product
         */
        id: string;
        /**
         * ID of the product family this product is a part of
         */
        productFamilyId?: string;
        /**
         * The name of the product
         */
        name: string;
        /**
         * The description of the product
         */
        description?: string;
        /**
         * The icon of the product
         */
        icon?: string;
        /**
         * URL of the product
         */
        url?: string;
        /**
         * The typical price of the product
         */
        defaultPrice?: number;
        /**
         * Currency of the default price
         */
        currency?: string;
        /**
         * Date and time when this record was last updated
         */
        lastUpdatedAt: string;
      }>;
    }>;
    pagination: {
      total: number;
      limit: number;
      offset: number;
    };
  };
};

export type ListProductFamiliesResponse =
  ListProductFamiliesResponses[keyof ListProductFamiliesResponses];

export type GetCompanyProductsData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the company to retrieve
     */
    companyId: string;
  };
  query?: {
    /**
     * A string of comma separated product ids.
     */
    ids?: Array<string>;
    /**
     * ID of the product family to retrieve
     */
    productFamilyId?: string;
    /**
     * Maximum number of companies to return
     */
    limit?: number;
    /**
     * Number of companies to skip
     */
    offset?: number;
    /**
     * Field to sort by
     */
    sortBy?: "name" | "sortOrder";
    /**
     * Sort order
     */
    sortOrder?: "asc" | "desc";
  };
  url: "/v1/catalog/companies/{companyId}/products";
};

export type GetCompanyProductsErrors = {
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Company not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetCompanyProductsError =
  GetCompanyProductsErrors[keyof GetCompanyProductsErrors];

export type GetCompanyProductsResponses = {
  /**
   * Successful operation
   */
  200: {
    data: Array<{
      /**
       * The ID of the product
       */
      id: string;
      /**
       * ID of the product family this product is a part of
       */
      productFamilyId?: string;
      /**
       * The name of the product
       */
      name: string;
      /**
       * The description of the product
       */
      description: string;
      /**
       * The icon of the product
       */
      icon?: string;
      /**
       * The URL of the product
       */
      url?: string;
      pricingDimensions: Array<{
        /**
         * The ID of the dimension.
         */
        id: string;
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The description of the dimension.
         */
        description: string;
        /**
         * whether the impact of this dimension on price is clearly known or not
         */
        priceImpactKnown: boolean;
        formField:
          | {
              type: "checkbox";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: boolean;
              value?: number;
            }
          | {
              type: "number";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: number;
              /**
               * Minimum allowed value
               */
              min?: number;
              /**
               * Maximum allowed value
               */
              max?: number;
              /**
               * Step increment for number input
               */
              step?: number;
            }
          | {
              type: "select";
              label: string;
              readonly: boolean;
              required: boolean;
              defaultValue?: string;
              /**
               * Available options for select field
               */
              options: Array<{
                label: string;
                value: string;
              }>;
            };
        dependsOn: {
          /**
           * The ID of the dimension that this dimension depends on
           */
          dependsOnDimensionId?: string;
          /**
           * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
           */
          dependency?: "quantity" | "inclusion";
        };
      }>;
      includedFeatures: Array<{
        /**
         * Feature ID
         */
        id: string;
        /**
         * Feature name
         */
        name: string;
        /**
         * Feature description
         */
        description: string;
      }>;
      /**
       * Currency of the default price
       */
      currency?: string;
      /**
       * Date and time when this record was last updated
       */
      lastUpdatedAt: string;
      competitors: Array<{
        companyId: string;
        companyName: string;
        domain: string;
        companyIcon?: string;
        productId: string;
        /**
         * The typical price of the product
         */
        defaultPrice?: number;
        productIcon?: string;
        productUrl?: string;
        productName: string;
        pricingDimensions: Array<{
          /**
           * The ID of the dimension.
           */
          id: string;
          /**
           * The name of the dimension.
           */
          name: string;
          /**
           * The description of the dimension.
           */
          description: string;
          /**
           * whether the impact of this dimension on price is clearly known or not
           */
          priceImpactKnown: boolean;
          formField:
            | {
                type: "checkbox";
                label: string;
                readonly: boolean;
                required: boolean;
                defaultValue?: boolean;
                value?: number;
              }
            | {
                type: "number";
                label: string;
                readonly: boolean;
                required: boolean;
                defaultValue?: number;
                /**
                 * Minimum allowed value
                 */
                min?: number;
                /**
                 * Maximum allowed value
                 */
                max?: number;
                /**
                 * Step increment for number input
                 */
                step?: number;
              }
            | {
                type: "select";
                label: string;
                readonly: boolean;
                required: boolean;
                defaultValue?: string;
                /**
                 * Available options for select field
                 */
                options: Array<{
                  label: string;
                  value: string;
                }>;
              };
          dependsOn: {
            /**
             * The ID of the dimension that this dimension depends on
             */
            dependsOnDimensionId?: string;
            /**
             * The type of dependency. Inclusion means that the dimension is dependent on the inclusion of another dimension. Quantity means the dimensions quantity is equal to the quantity of the other dimension.
             */
            dependency?: "quantity" | "inclusion";
          };
        }>;
        includedFeatures: Array<{
          /**
           * Feature ID
           */
          id: string;
          /**
           * Feature name
           */
          name: string;
          /**
           * Feature description
           */
          description: string;
        }>;
      }>;
    }>;
    pagination: {
      total: number;
      limit: number;
      offset: number;
    };
  };
};

export type GetCompanyProductsResponse =
  GetCompanyProductsResponses[keyof GetCompanyProductsResponses];

export type GetBasicPriceEstimateData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the scope to retrieve pricing for
     */
    scopeId: string;
  };
  query?: never;
  url: "/v1/pricing/basic/{scopeId}";
};

export type GetBasicPriceEstimateErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Scope or product not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Pricing failed
   */
  422: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetBasicPriceEstimateError =
  GetBasicPriceEstimateErrors[keyof GetBasicPriceEstimateErrors];

export type GetBasicPriceEstimateResponses = {
  /**
   * Successful price estimate
   */
  200: {
    estimate: {
      /**
       * 25th percentile price estimate
       */
      percentile25: number;
      /**
       * 50th percentile price estimate (median)
       */
      percentile50: number;
      /**
       * 75th percentile price estimate
       */
      percentile75: number;
    };
    /**
     * Currency code (ISO 4217)
     */
    currency: string;
    /**
     * Timestamp when this estimate was generated
     */
    timestamp: string;
  };
};

export type GetBasicPriceEstimateResponse =
  GetBasicPriceEstimateResponses[keyof GetBasicPriceEstimateResponses];

export type GetAdvancedPriceEstimateData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the scope to retrieve pricing for
     */
    scopeId: string;
  };
  query?: never;
  url: "/v1/pricing/advanced/{scopeId}";
};

export type GetAdvancedPriceEstimateErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Scope or product not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Pricing failed
   */
  422: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetAdvancedPriceEstimateError =
  GetAdvancedPriceEstimateErrors[keyof GetAdvancedPriceEstimateErrors];

export type GetAdvancedPriceEstimateResponses = {
  /**
   * Successful advanced price estimate
   */
  200: {
    /**
     * Price estimate distribution at 5 percentile increments
     */
    estimate: {
      /**
       * 10th percentile price estimate
       */
      percentile10: number;
      /**
       * 15th percentile price estimate
       */
      percentile15: number;
      /**
       * 20th percentile price estimate
       */
      percentile20: number;
      /**
       * 25th percentile price estimate
       */
      percentile25: number;
      /**
       * 30th percentile price estimate
       */
      percentile30: number;
      /**
       * 35th percentile price estimate
       */
      percentile35: number;
      /**
       * 40th percentile price estimate
       */
      percentile40: number;
      /**
       * 45th percentile price estimate
       */
      percentile45: number;
      /**
       * 50th percentile price estimate (median)
       */
      percentile50: number;
      /**
       * 55th percentile price estimate
       */
      percentile55: number;
      /**
       * 60th percentile price estimate
       */
      percentile60: number;
      /**
       * 65th percentile price estimate
       */
      percentile65: number;
      /**
       * 70th percentile price estimate
       */
      percentile70: number;
      /**
       * 75th percentile price estimate
       */
      percentile75: number;
      /**
       * 80th percentile price estimate
       */
      percentile80: number;
      /**
       * 85th percentile price estimate
       */
      percentile85: number;
      /**
       * 90th percentile price estimate
       */
      percentile90: number;
    };
    /**
     * Product level price estimate distributions
     */
    productEstimates: Array<
      | {
          status: "success";
          /**
           * Whether the product estimate was defaulted to a fallback
           */
          defaulted: boolean;
          /**
           * Price estimate distribution at 5 percentile increments
           */
          estimate: {
            /**
             * 10th percentile price estimate
             */
            percentile10: number;
            /**
             * 15th percentile price estimate
             */
            percentile15: number;
            /**
             * 20th percentile price estimate
             */
            percentile20: number;
            /**
             * 25th percentile price estimate
             */
            percentile25: number;
            /**
             * 30th percentile price estimate
             */
            percentile30: number;
            /**
             * 35th percentile price estimate
             */
            percentile35: number;
            /**
             * 40th percentile price estimate
             */
            percentile40: number;
            /**
             * 45th percentile price estimate
             */
            percentile45: number;
            /**
             * 50th percentile price estimate (median)
             */
            percentile50: number;
            /**
             * 55th percentile price estimate
             */
            percentile55: number;
            /**
             * 60th percentile price estimate
             */
            percentile60: number;
            /**
             * 65th percentile price estimate
             */
            percentile65: number;
            /**
             * 70th percentile price estimate
             */
            percentile70: number;
            /**
             * 75th percentile price estimate
             */
            percentile75: number;
            /**
             * 80th percentile price estimate
             */
            percentile80: number;
            /**
             * 85th percentile price estimate
             */
            percentile85: number;
            /**
             * 90th percentile price estimate
             */
            percentile90: number;
          };
          /**
           * Name of the product
           */
          name: string;
          /**
           * ID of the product
           */
          productId: string;
        }
      | {
          status: "error";
          code: "pricing_failed" | "validation_failed";
          /**
           * Whether the product estimate was defaulted to a fallback, that then failed
           */
          defaulted: boolean;
          /**
           * Error message
           */
          message: string;
          /**
           * Name of the product
           */
          name: string;
          /**
           * ID of the product
           */
          productId: string;
        }
    >;
    /**
     * Currency code (ISO 4217)
     */
    currency: string;
    /**
     * Timestamp when this estimate was generated
     */
    timestamp: string;
  };
};

export type GetAdvancedPriceEstimateResponse =
  GetAdvancedPriceEstimateResponses[keyof GetAdvancedPriceEstimateResponses];

export type GetScopeByIdData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path: {
    /**
     * ID of the scope to retrieve
     */
    scopeId: string;
  };
  query?: never;
  url: "/v1/scope/{scopeId}";
};

export type GetScopeByIdErrors = {
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Scope not found
   */
  404: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetScopeByIdError = GetScopeByIdErrors[keyof GetScopeByIdErrors];

export type GetScopeByIdResponses = {
  /**
   * Successful operation
   */
  200: {
    /**
     * ID of the scope
     */
    id: string;
    /**
     * Type of data source for this scope, can be either 'manual' or 'document'
     */
    source: "manual" | "document";
    /**
     * Date and time the scope was created
     */
    createdOn: string;
    /**
     * ID of the previous scope to this scope (if any)
     */
    previousScopeId?: string;
    /**
     * ID of the next scope to this scope (if any)
     */
    nextScopeId?: string;
    /**
     * Document processing details, when relevant
     */
    documentProcessing?: {
      /**
       * Current status of document processing
       */
      status: "pending" | "processing" | "completed" | "failed";
      /**
       * Original filename of the document
       */
      filename: string;
      /**
       * Detected document type
       */
      documentType: "order_form" | "contract" | "other";
      /**
       * MIME type of the document
       */
      mimeType: string;
      /**
       * Error message if processing failed
       */
      error?: string;
      /**
       * When the processing status was last updated
       */
      updatedAt: string;
    };
    /**
     * Terms of purchase that apply to the whole scope
     */
    scopeTerms: Array<{
      /**
       * Length of the term in months
       */
      termLength: number;
      /**
       * Whether the scope is a new purchase or a renewal.
       */
      purchaseType: "new_purchase" | "renewal";
      /**
       * List price of the scope
       */
      listPrice?: number;
      /**
       * Discount on the list price
       */
      discount?: number;
      /**
       * Final price of the scope after discount
       */
      finalPrice?: number;
    }>;
    /**
     * Terms of purchase that apply to specific products, including the dimension values for each product
     */
    productTerms: Array<{
      /**
       * Product ID
       */
      productId: string;
      /**
       * Name of the product
       */
      productName: string;
      /**
       * ID of the product family
       */
      productFamilyId?: string;
      /**
       * Product description
       */
      description?: string;
      /**
       * Icon of the product
       */
      icon?: string;
      /**
       * URL of the product
       */
      url?: string;
      /**
       * Dimensions that impact the price of the product
       */
      pricingDimensions: Array<{
        /**
         * ID of the dimension
         */
        id: string;
        /**
         * Name of the dimension
         */
        name: string;
        /**
         * Description of the dimension
         */
        description?: string;
        /**
         * Value of the dimension
         */
        value?: number;
      }>;
      /**
       * Add-on features generally included at no additional cost
       */
      includedFeatures: Array<{
        /**
         * ID of the feature
         */
        id: string;
        /**
         * Name of the feature
         */
        name: string;
        /**
         * Description of the feature
         */
        description?: string;
      }>;
      listPrice?: number;
      discount?: number;
      finalPrice?: number;
    }>;
  };
};

export type GetScopeByIdResponse =
  GetScopeByIdResponses[keyof GetScopeByIdResponses];

export type CreateScopeData = {
  /**
   * Scope to create
   */
  body: {
    /**
     * Id of the previous scope this replaced
     */
    previousScopeId?: string;
    /**
     * Terms of purchase that apply to the whole scope
     */
    scopeTerms: Array<{
      /**
       * Length of the term in months
       */
      termLength: number;
      /**
       * Whether the scope is a new purchase or a renewal.
       */
      purchaseType: "new_purchase" | "renewal";
      /**
       * Whether the scope has a auto-renewal clause or not
       */
      autoRenew?: boolean;
      /**
       * Start date of the scope
       */
      startDate?: string;
      /**
       * End date of the scope
       */
      endDate?: string;
      /**
       * List price of the scope
       */
      listPrice?: number;
      /**
       * Discount on the list price
       */
      discount?: number;
      /**
       * Final price of the scope after discount
       */
      finalPrice?: number;
    }>;
    /**
     * Terms of purchase that apply to specific products, including the dimension values for each product
     */
    productTerms: Array<{
      /**
       * Id of the product the term applies to.
       */
      productId: string;
      /**
       * Dimensions that impact the price of the product
       */
      pricingDimensions: Array<{
        /**
         * Dimension ID
         */
        id: string;
        /**
         * Value for this dimension
         */
        value: number;
      }>;
      /**
       * Product specific start date
       */
      startDate?: string;
      /**
       * Product specific end date
       */
      endDate?: string;
      /**
       * Product specific list price
       */
      listPrice?: number;
      /**
       * Product specific discount
       */
      discount?: number;
      /**
       * Product specific final price after applying discount on product list price
       */
      finalPrice?: number;
    }>;
  };
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/scope";
};

export type CreateScopeErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type CreateScopeError = CreateScopeErrors[keyof CreateScopeErrors];

export type CreateScopeResponses = {
  /**
   * Scope created successfully
   */
  201: {
    /**
     * ID of the scope
     */
    id: string;
    /**
     * Type of data source for this scope, can be either 'manual' or 'document'
     */
    source: "manual" | "document";
    /**
     * Date and time the scope was created
     */
    createdOn: string;
    /**
     * ID of the previous scope to this scope (if any)
     */
    previousScopeId?: string;
    /**
     * ID of the next scope to this scope (if any)
     */
    nextScopeId?: string;
    /**
     * Document processing details, when relevant
     */
    documentProcessing?: {
      /**
       * Current status of document processing
       */
      status: "pending" | "processing" | "completed" | "failed";
      /**
       * Original filename of the document
       */
      filename: string;
      /**
       * Detected document type
       */
      documentType: "order_form" | "contract" | "other";
      /**
       * MIME type of the document
       */
      mimeType: string;
      /**
       * Error message if processing failed
       */
      error?: string;
      /**
       * When the processing status was last updated
       */
      updatedAt: string;
    };
    /**
     * Terms of purchase that apply to the whole scope
     */
    scopeTerms: Array<{
      /**
       * Length of the term in months
       */
      termLength: number;
      /**
       * Whether the scope is a new purchase or a renewal.
       */
      purchaseType: "new_purchase" | "renewal";
      /**
       * List price of the scope
       */
      listPrice?: number;
      /**
       * Discount on the list price
       */
      discount?: number;
      /**
       * Final price of the scope after discount
       */
      finalPrice?: number;
    }>;
    /**
     * Terms of purchase that apply to specific products, including the dimension values for each product
     */
    productTerms: Array<{
      /**
       * Product ID
       */
      productId: string;
      /**
       * Name of the product
       */
      productName: string;
      /**
       * ID of the product family
       */
      productFamilyId?: string;
      /**
       * Product description
       */
      description?: string;
      /**
       * Icon of the product
       */
      icon?: string;
      /**
       * URL of the product
       */
      url?: string;
      /**
       * Dimensions that impact the price of the product
       */
      pricingDimensions: Array<{
        /**
         * ID of the dimension
         */
        id: string;
        /**
         * Name of the dimension
         */
        name: string;
        /**
         * Description of the dimension
         */
        description?: string;
        /**
         * Value of the dimension
         */
        value?: number;
      }>;
      /**
       * Add-on features generally included at no additional cost
       */
      includedFeatures: Array<{
        /**
         * ID of the feature
         */
        id: string;
        /**
         * Name of the feature
         */
        name: string;
        /**
         * Description of the feature
         */
        description?: string;
      }>;
      listPrice?: number;
      discount?: number;
      finalPrice?: number;
    }>;
  };
};

export type CreateScopeResponse =
  CreateScopeResponses[keyof CreateScopeResponses];

export type CreateScopeFromDocumentData = {
  /**
   * Document to upload
   */
  body: {
    /**
     * Contract, quote, or other pricing documents. 50mb size limit. May be one of: pdf, docx, doc, xls, xlsx, csv, png, or jpeg.
     */
    file: Blob | File;
    /**
     * Type of agreement
     */
    purchaseType?: "new_purchase" | "renewal";
  };
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/scope/from-document";
};

export type CreateScopeFromDocumentErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type CreateScopeFromDocumentError =
  CreateScopeFromDocumentErrors[keyof CreateScopeFromDocumentErrors];

export type CreateScopeFromDocumentResponses = {
  /**
   * Document uploaded successfully
   */
  201: {
    /**
     * ID of the created scope
     */
    scopeId: string;
  };
};

export type CreateScopeFromDocumentResponse =
  CreateScopeFromDocumentResponses[keyof CreateScopeFromDocumentResponses];

export type GetV1OpenapiData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/openapi";
};

export type GetV1OpenapiResponses = {
  /**
   * OpenAPI 3 JSON Document
   */
  200: {
    [key: string]: unknown;
  };
};

export type GetV1OpenapiResponse =
  GetV1OpenapiResponses[keyof GetV1OpenapiResponses];

export type ListWebhooksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/webhooks";
};

export type ListWebhooksErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type ListWebhooksError = ListWebhooksErrors[keyof ListWebhooksErrors];

export type ListWebhooksResponses = {
  /**
   * Webhook list
   */
  200: Array<{
    id: string;
    url: string;
    events: Array<string>;
  }>;
};

export type ListWebhooksResponse =
  ListWebhooksResponses[keyof ListWebhooksResponses];

export type CreateWebhookData = {
  /**
   * Webhook to create
   */
  body: {
    url: string;
    events: Array<"scope.extracted">;
  };
  path?: never;
  query?: never;
  url: "/v1/webhooks";
};

export type CreateWebhookErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type CreateWebhookError = CreateWebhookErrors[keyof CreateWebhookErrors];

export type CreateWebhookResponses = {
  /**
   * Webhook created successfully
   */
  201: {
    /**
     * The ID of the webhook
     */
    id: string;
    /**
     * The URL where webhook events will be sent
     */
    url: string;
    /**
     * List of events to subscribe to
     */
    events: Array<"scope.extracted">;
    /**
     * The secret used to sign webhook events
     */
    secret?: string;
  };
};

export type CreateWebhookResponse =
  CreateWebhookResponses[keyof CreateWebhookResponses];

export type ListWebhookEventsData = {
  body?: never;
  path: {
    /**
     * The ID of the webhook
     */
    webhookId: string;
  };
  query?: never;
  url: "/v1/webhooks/{webhookId}/events";
};

export type ListWebhookEventsErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type ListWebhookEventsError =
  ListWebhookEventsErrors[keyof ListWebhookEventsErrors];

export type ListWebhookEventsResponses = {
  /**
   * Webhook events list
   */
  200: Array<{
    id: string;
    attempts: number;
    responseStatus: number;
    lastAttemptAt: string;
    nextAttemptAt: string;
    successfulAt: string;
    updatedAt: string;
    createdAt: string;
    status: string;
  }>;
};

export type ListWebhookEventsResponse =
  ListWebhookEventsResponses[keyof ListWebhookEventsResponses];

export type GetWebhookEventByIdData = {
  body?: never;
  path: {
    /**
     * The ID of the webhook
     */
    webhookId: string;
    /**
     * The ID of the webhook event
     */
    eventId: string;
  };
  query?: never;
  url: "/v1/webhooks/{webhookId}/events/{eventId}";
};

export type GetWebhookEventByIdErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetWebhookEventByIdError =
  GetWebhookEventByIdErrors[keyof GetWebhookEventByIdErrors];

export type GetWebhookEventByIdResponses = {
  /**
   * Webhook event
   */
  200: {
    id: string;
    attempts: number;
    responseStatus: number;
    lastAttemptAt: string;
    nextAttemptAt: string;
    successfulAt: string;
    updatedAt: string;
    createdAt: string;
    status: string;
    data: {
      headers: {
        [key: string]: string;
      };
      body: {
        eventType: "scope.extracted";
        data: {
          scopeId: string;
          status: "completed" | "failed";
          errorMessage?: string;
        };
      };
      query: string;
      parsedQuery: {
        [key: string]: unknown;
      };
      path: string;
    };
  };
};

export type GetWebhookEventByIdResponse =
  GetWebhookEventByIdResponses[keyof GetWebhookEventByIdResponses];

export type DeleteWebhookByIdData = {
  body?: never;
  path: {
    /**
     * The ID of the webhook
     */
    webhookId: string;
  };
  query?: never;
  url: "/v1/webhooks/{webhookId}";
};

export type DeleteWebhookByIdErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type DeleteWebhookByIdError =
  DeleteWebhookByIdErrors[keyof DeleteWebhookByIdErrors];

export type DeleteWebhookByIdResponses = {
  /**
   * Webhook deleted successfully
   */
  200: {
    id: string;
  };
};

export type DeleteWebhookByIdResponse =
  DeleteWebhookByIdResponses[keyof DeleteWebhookByIdResponses];

export type GetV1HealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v1/health";
};

export type GetV1HealthErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type GetV1HealthError = GetV1HealthErrors[keyof GetV1HealthErrors];

export type GetV1HealthResponses = {
  /**
   * Server is running
   */
  200: {
    /**
     * Current health status of the API
     */
    status: "ok" | "degraded" | "error";
    /**
     * ISO timestamp of when the health check was performed
     */
    timestamp: string;
    /**
     * Version of the API
     */
    version: string;
    /**
     * Array of services and their health status
     */
    services: Array<{
      /**
       * Name of the service
       */
      name: string;
      /**
       * Current health status of the service
       */
      status: "ok" | "degraded" | "error";
    }>;
  };
};

export type GetV1HealthResponse =
  GetV1HealthResponses[keyof GetV1HealthResponses];

export type ListIntentData = {
  body?: never;
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path?: never;
  query?: {
    /**
     * Filter by supplier ID
     */
    supplierIds?: Array<string>;
    /**
     * Filter by product family ID
     */
    productFamilyIds?: Array<string>;
    /**
     * Filter by product ID
     */
    productIds?: Array<string>;
    /**
     * Filter by company name, seller or product name (partial match)
     */
    name?: string;
    /**
     * Filter by company domain
     */
    domain?: string;
    /**
     * Filter by location. (country code)
     */
    location?: string;
    /**
     * Filter by headcount by the following headcount group - <50, 50-250, 251-1000, 1000+
     */
    headcount?: "below-50" | "50-250" | "251-1000" | "1000-above";
    /**
     * Filter by revenue by the following revenue group - <$10M, $10-50M, $50-100M, $100-500M, $500-$1B, $1B+
     */
    revenue?:
      | "below-10M"
      | "10-50M"
      | "50-100M"
      | "100-500M"
      | "500-1B"
      | "1B-above";
    /**
     * Filter by from date
     */
    fromDate?: string;
    /**
     * Filter by engagement type
     */
    engagementType?: Array<
      | "price-estimate"
      | "price-check"
      | "catalog-view-verified"
      | "catalog-view"
    >;
    /**
     * Filter by origin
     */
    origin?: string;
    /**
     * Filter by to date
     */
    toDate?: string;
    /**
     * Maximum number of companies to return
     */
    limit?: number;
    /**
     * Number of companies to skip
     */
    offset?: number;
    /**
     * Field to sort by
     */
    sortBy?:
      | "product-name"
      | "buyer-company-name"
      | "seller-company-name"
      | "captured-at";
    /**
     * Sort order
     */
    sortOrder?: "asc" | "desc";
  };
  url: "/v1/intent";
};

export type ListIntentErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type ListIntentError = ListIntentErrors[keyof ListIntentErrors];

export type ListIntentResponses = {
  /**
   * Successful operation
   */
  200: {
    data: Array<{
      id: string;
      userDetails: {
        companyName: string;
        domain: string;
        countryCode?: string;
        city?: string;
        region?: string;
        sector?: string;
        headcount?: number;
        estimatedRevenue?: number;
        estimatedRevenueRawValue?: string;
      };
      timestamp: string;
      event:
        | {
            engagementType: "price-estimate";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            requestedOn: string;
            /**
             * Price estimate distribution at 5 percentile increments
             */
            estimate: {
              /**
               * 10th percentile price estimate
               */
              percentile10?: number;
              /**
               * 15th percentile price estimate
               */
              percentile15?: number;
              /**
               * 20th percentile price estimate
               */
              percentile20?: number;
              /**
               * 25th percentile price estimate
               */
              percentile25?: number;
              /**
               * 30th percentile price estimate
               */
              percentile30?: number;
              /**
               * 35th percentile price estimate
               */
              percentile35?: number;
              /**
               * 40th percentile price estimate
               */
              percentile40?: number;
              /**
               * 45th percentile price estimate
               */
              percentile45?: number;
              /**
               * 50th percentile price estimate (median)
               */
              percentile50?: number;
              /**
               * 55th percentile price estimate
               */
              percentile55?: number;
              /**
               * 60th percentile price estimate
               */
              percentile60?: number;
              /**
               * 65th percentile price estimate
               */
              percentile65?: number;
              /**
               * 70th percentile price estimate
               */
              percentile70?: number;
              /**
               * 75th percentile price estimate
               */
              percentile75?: number;
              /**
               * 80th percentile price estimate
               */
              percentile80?: number;
              /**
               * 85th percentile price estimate
               */
              percentile85?: number;
              /**
               * 90th percentile price estimate
               */
              percentile90?: number;
            };
            /**
             * Product level price estimate distributions
             */
            productEstimates?: Array<
              | {
                  status: "success";
                  /**
                   * Whether the product estimate was defaulted to a fallback
                   */
                  defaulted: boolean;
                  /**
                   * Price estimate distribution at 5 percentile increments
                   */
                  estimate: {
                    /**
                     * 10th percentile price estimate
                     */
                    percentile10: number;
                    /**
                     * 15th percentile price estimate
                     */
                    percentile15: number;
                    /**
                     * 20th percentile price estimate
                     */
                    percentile20: number;
                    /**
                     * 25th percentile price estimate
                     */
                    percentile25: number;
                    /**
                     * 30th percentile price estimate
                     */
                    percentile30: number;
                    /**
                     * 35th percentile price estimate
                     */
                    percentile35: number;
                    /**
                     * 40th percentile price estimate
                     */
                    percentile40: number;
                    /**
                     * 45th percentile price estimate
                     */
                    percentile45: number;
                    /**
                     * 50th percentile price estimate (median)
                     */
                    percentile50: number;
                    /**
                     * 55th percentile price estimate
                     */
                    percentile55: number;
                    /**
                     * 60th percentile price estimate
                     */
                    percentile60: number;
                    /**
                     * 65th percentile price estimate
                     */
                    percentile65: number;
                    /**
                     * 70th percentile price estimate
                     */
                    percentile70: number;
                    /**
                     * 75th percentile price estimate
                     */
                    percentile75: number;
                    /**
                     * 80th percentile price estimate
                     */
                    percentile80: number;
                    /**
                     * 85th percentile price estimate
                     */
                    percentile85: number;
                    /**
                     * 90th percentile price estimate
                     */
                    percentile90: number;
                  };
                  /**
                   * Name of the product
                   */
                  name: string;
                  /**
                   * ID of the product
                   */
                  productId: string;
                }
              | {
                  status: "error";
                  code: "pricing_failed" | "validation_failed";
                  /**
                   * Whether the product estimate was defaulted to a fallback, that then failed
                   */
                  defaulted: boolean;
                  /**
                   * Error message
                   */
                  message: string;
                  /**
                   * Name of the product
                   */
                  name: string;
                  /**
                   * ID of the product
                   */
                  productId: string;
                }
            >;
            /**
             * Currency code (ISO 4217)
             */
            currency?: string;
            /**
             * Timestamp when this estimate was generated
             */
            timestamp?: string;
          }
        | {
            engagementType: "price-check";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            /**
             * Whether the price check is for a new purchase or a renewal.
             */
            purchaseType: "new_purchase" | "renewal";
            /**
             * The date of the renewal estimate.
             */
            estimateRenewalDate?: string;
            /**
             * The approximate range for the estimated contract value.
             */
            estimateContractValueRange?: {
              /**
               * The minimum estimated contract value.
               */
              min: number;
              /**
               * The maximum estimated contract value.
               */
              max: number;
            };
            requestedOn: string;
          }
        | {
            engagementType: "catalog-view-verified";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            viewedAt: string;
            totalDailyVisits?: number;
          }
        | {
            engagementType: "catalog-view";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            viewedAt: string;
            totalDailyVisits?: number;
          };
      origin?: string;
    }>;
    pagination: {
      total: number;
      limit: number;
      offset: number;
    };
  };
};

export type ListIntentResponse = ListIntentResponses[keyof ListIntentResponses];

export type ListIntent2Data = {
  body: {
    /**
     * Filter by supplier ID
     */
    supplierIds?: Array<string>;
    /**
     * Filter by product family ID
     */
    productFamilyIds?: Array<string>;
    /**
     * Filter by product ID
     */
    productIds?: Array<string>;
    /**
     * Filter by company name, seller or product name (partial match)
     */
    name?: string;
    /**
     * Filter by company domain
     */
    domain?: string;
    /**
     * Filter by location. (country code)
     */
    location?: string;
    /**
     * Filter by headcount by the following headcount group - <50, 50-250, 251-1000, 1000+
     */
    headcount?: "below-50" | "50-250" | "251-1000" | "1000-above";
    /**
     * Filter by revenue by the following revenue group - <$10M, $10-50M, $50-100M, $100-500M, $500-$1B, $1B+
     */
    revenue?:
      | "below-10M"
      | "10-50M"
      | "50-100M"
      | "100-500M"
      | "500-1B"
      | "1B-above";
    /**
     * Filter by from date
     */
    fromDate?: string;
    /**
     * Filter by engagement type
     */
    engagementType?: Array<
      | "price-estimate"
      | "price-check"
      | "catalog-view-verified"
      | "catalog-view"
    >;
    /**
     * Filter by origin
     */
    origin?: string;
    /**
     * Filter by to date
     */
    toDate?: string;
    /**
     * Maximum number of companies to return
     */
    limit?: number;
    /**
     * Number of companies to skip
     */
    offset?: number;
    /**
     * Field to sort by
     */
    sortBy?:
      | "product-name"
      | "buyer-company-name"
      | "seller-company-name"
      | "captured-at";
    /**
     * Sort order
     */
    sortOrder?: "asc" | "desc";
  };
  headers?: {
    /**
     * Unique identifier for the end user
     */
    "x-vendr-end-user-identifier"?: string;
    /**
     * IP address of the end user
     */
    "x-vendr-end-user-ip"?: string;
    /**
     * Email address of the end user
     */
    "x-vendr-end-user-email"?: string;
    /**
     * Unique identifier for the end user's organization
     */
    "x-vendr-end-user-organization-name"?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/intent";
};

export type ListIntent2Errors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type ListIntent2Error = ListIntent2Errors[keyof ListIntent2Errors];

export type ListIntent2Responses = {
  /**
   * Successful operation
   */
  200: {
    data: Array<{
      id: string;
      userDetails: {
        companyName: string;
        domain: string;
        countryCode?: string;
        city?: string;
        region?: string;
        sector?: string;
        headcount?: number;
        estimatedRevenue?: number;
        estimatedRevenueRawValue?: string;
      };
      timestamp: string;
      event:
        | {
            engagementType: "price-estimate";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            requestedOn: string;
            /**
             * Price estimate distribution at 5 percentile increments
             */
            estimate: {
              /**
               * 10th percentile price estimate
               */
              percentile10?: number;
              /**
               * 15th percentile price estimate
               */
              percentile15?: number;
              /**
               * 20th percentile price estimate
               */
              percentile20?: number;
              /**
               * 25th percentile price estimate
               */
              percentile25?: number;
              /**
               * 30th percentile price estimate
               */
              percentile30?: number;
              /**
               * 35th percentile price estimate
               */
              percentile35?: number;
              /**
               * 40th percentile price estimate
               */
              percentile40?: number;
              /**
               * 45th percentile price estimate
               */
              percentile45?: number;
              /**
               * 50th percentile price estimate (median)
               */
              percentile50?: number;
              /**
               * 55th percentile price estimate
               */
              percentile55?: number;
              /**
               * 60th percentile price estimate
               */
              percentile60?: number;
              /**
               * 65th percentile price estimate
               */
              percentile65?: number;
              /**
               * 70th percentile price estimate
               */
              percentile70?: number;
              /**
               * 75th percentile price estimate
               */
              percentile75?: number;
              /**
               * 80th percentile price estimate
               */
              percentile80?: number;
              /**
               * 85th percentile price estimate
               */
              percentile85?: number;
              /**
               * 90th percentile price estimate
               */
              percentile90?: number;
            };
            /**
             * Product level price estimate distributions
             */
            productEstimates?: Array<
              | {
                  status: "success";
                  /**
                   * Whether the product estimate was defaulted to a fallback
                   */
                  defaulted: boolean;
                  /**
                   * Price estimate distribution at 5 percentile increments
                   */
                  estimate: {
                    /**
                     * 10th percentile price estimate
                     */
                    percentile10: number;
                    /**
                     * 15th percentile price estimate
                     */
                    percentile15: number;
                    /**
                     * 20th percentile price estimate
                     */
                    percentile20: number;
                    /**
                     * 25th percentile price estimate
                     */
                    percentile25: number;
                    /**
                     * 30th percentile price estimate
                     */
                    percentile30: number;
                    /**
                     * 35th percentile price estimate
                     */
                    percentile35: number;
                    /**
                     * 40th percentile price estimate
                     */
                    percentile40: number;
                    /**
                     * 45th percentile price estimate
                     */
                    percentile45: number;
                    /**
                     * 50th percentile price estimate (median)
                     */
                    percentile50: number;
                    /**
                     * 55th percentile price estimate
                     */
                    percentile55: number;
                    /**
                     * 60th percentile price estimate
                     */
                    percentile60: number;
                    /**
                     * 65th percentile price estimate
                     */
                    percentile65: number;
                    /**
                     * 70th percentile price estimate
                     */
                    percentile70: number;
                    /**
                     * 75th percentile price estimate
                     */
                    percentile75: number;
                    /**
                     * 80th percentile price estimate
                     */
                    percentile80: number;
                    /**
                     * 85th percentile price estimate
                     */
                    percentile85: number;
                    /**
                     * 90th percentile price estimate
                     */
                    percentile90: number;
                  };
                  /**
                   * Name of the product
                   */
                  name: string;
                  /**
                   * ID of the product
                   */
                  productId: string;
                }
              | {
                  status: "error";
                  code: "pricing_failed" | "validation_failed";
                  /**
                   * Whether the product estimate was defaulted to a fallback, that then failed
                   */
                  defaulted: boolean;
                  /**
                   * Error message
                   */
                  message: string;
                  /**
                   * Name of the product
                   */
                  name: string;
                  /**
                   * ID of the product
                   */
                  productId: string;
                }
            >;
            /**
             * Currency code (ISO 4217)
             */
            currency?: string;
            /**
             * Timestamp when this estimate was generated
             */
            timestamp?: string;
          }
        | {
            engagementType: "price-check";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            /**
             * Whether the price check is for a new purchase or a renewal.
             */
            purchaseType: "new_purchase" | "renewal";
            /**
             * The date of the renewal estimate.
             */
            estimateRenewalDate?: string;
            /**
             * The approximate range for the estimated contract value.
             */
            estimateContractValueRange?: {
              /**
               * The minimum estimated contract value.
               */
              min: number;
              /**
               * The maximum estimated contract value.
               */
              max: number;
            };
            requestedOn: string;
          }
        | {
            engagementType: "catalog-view-verified";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            viewedAt: string;
            totalDailyVisits?: number;
          }
        | {
            engagementType: "catalog-view";
            product?: {
              /**
               * The ID of the product
               */
              id: string;
              /**
               * ID of the product family this product is a part of
               */
              productFamilyId?: string;
              /**
               * The name of the product
               */
              name: string;
              /**
               * The description of the product
               */
              description?: string;
              /**
               * The icon of the product
               */
              icon?: string;
              /**
               * URL of the product
               */
              url?: string;
              /**
               * The typical price of the product
               */
              defaultPrice?: number;
              /**
               * Currency of the default price
               */
              currency?: string;
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            company: {
              id: string;
              name: string;
              legalName: string;
              domain: string;
              url?: string;
              description: string;
              /**
               * If false, indicates that the company is active as a brand, even if acquired or merged with another company
               */
              discontinued: boolean;
              /**
               * The logo of the company.
               */
              icon?: string;
              /**
               * The fiscal year end for the company
               */
              fiscalYearEnd?: string;
              /**
               * Array of public stock market symbols for the company
               */
              stockSymbols?: Array<{
                /**
                 * The stock market symbol for the company
                 */
                symbol: string;
                /**
                 * The stock market exchange for this stock symbol
                 */
                exchange: string;
              }>;
              category?: {
                /**
                 * Unique identifier for the category
                 */
                id: string;
                /**
                 * Name of the category
                 */
                name: string;
                /**
                 * Description of the category
                 */
                description: string;
                /**
                 * ID of the parent category
                 */
                parentCategoryId?: string;
                /**
                 * Date and time when this record was last updated
                 */
                lastUpdatedAt: string;
              };
              /**
               * Date and time when this record was last updated
               */
              lastUpdatedAt: string;
            };
            viewedAt: string;
            totalDailyVisits?: number;
          };
      origin?: string;
    }>;
    pagination: {
      total: number;
      limit: number;
      offset: number;
    };
  };
};

export type ListIntent2Response =
  ListIntent2Responses[keyof ListIntent2Responses];

export type TrackIntentData = {
  /**
   * Register a new tracked intent
   */
  body: {
    /**
     * ID of the company you're tracking intent for.
     */
    companyId?: string;
    /**
     * ID of the product you're tracking intent for.
     */
    productId?: string;
    /**
     * ID of the scope you're tracking intent for.
     */
    scopeId?: string;
    /**
     * The engagement type that is being tracked.
     */
    engagementType:
      | "price_estimate"
      | "price_check"
      | "catalog_view_verified"
      | "catalog_view";
    /**
     * The url that is being tracked.
     */
    url?: string;
    /**
     * An identifier for the end user being tracked.
     */
    endUserIdentifier?: string;
    /**
     * The IP address of the end user being tracked.
     */
    endUserIp?: string;
    /**
     * The email address of the end user being tracked.
     */
    endUserEmail?: string;
    /**
     * The organization identifier of the end user being tracked.
     */
    endUserOrganizationIdentifier?: string;
    /**
     * The source from where the intent is being tracked.
     */
    source?: string;
  };
  path?: never;
  query?: never;
  url: "/v1/track";
};

export type TrackIntentErrors = {
  /**
   * Invalid request
   */
  400: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Unauthorized
   */
  401: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
  /**
   * Forbidden
   */
  403: {
    /**
     * HTTP status type
     */
    type?: string;
    /**
     * HTTP status code
     */
    status: number;
    /**
     * HTTP status title
     */
    title: string;
    /**
     * Human-readable description of the error
     */
    detail: string;
    instance?: string;
    trace?: {
      timestamp?: string;
      requestId?: string;
      buildId?: string;
      rayId?: string;
    };
  };
};

export type TrackIntentError = TrackIntentErrors[keyof TrackIntentErrors];

export type TrackIntentResponses = {
  /**
   * Successful operation
   */
  204: void;
};

export type TrackIntentResponse =
  TrackIntentResponses[keyof TrackIntentResponses];

export type ClientOptions = {
  baseUrl:
    | "https://api.vendr.com"
    | "https://api.staging.vendr.com"
    | "https://api.preview.vendr-dev.com"
    | "https://api.local.vendr-dev.com"
    | (string & {});
};
