// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  GetCompanyData,
  GetCompanyResponses,
  GetCompanyErrors,
  GetProductFamilyData,
  GetProductFamilyResponses,
  GetProductFamilyErrors,
  GetProductData,
  GetProductResponses,
  GetProductErrors,
  ListCategoriesData,
  ListCategoriesResponses,
  ListCategoriesErrors,
  ListCompaniesData,
  ListCompaniesResponses,
  ListCompaniesErrors,
  ListProductFamiliesData,
  ListProductFamiliesResponses,
  ListProductFamiliesErrors,
  GetCompanyProductsData,
  GetCompanyProductsResponses,
  GetCompanyProductsErrors,
  GetBasicPriceEstimateData,
  GetBasicPriceEstimateResponses,
  GetBasicPriceEstimateErrors,
  GetAdvancedPriceEstimateData,
  GetAdvancedPriceEstimateResponses,
  GetAdvancedPriceEstimateErrors,
  GetScopeByIdData,
  GetScopeByIdResponses,
  GetScopeByIdErrors,
  CreateScopeData,
  CreateScopeResponses,
  CreateScopeErrors,
  CreateScopeFromDocumentData,
  CreateScopeFromDocumentResponses,
  CreateScopeFromDocumentErrors,
  GetV1OpenapiData,
  GetV1OpenapiResponses,
  ListWebhooksData,
  ListWebhooksResponses,
  ListWebhooksErrors,
  CreateWebhookData,
  CreateWebhookResponses,
  CreateWebhookErrors,
  ListWebhookEventsData,
  ListWebhookEventsResponses,
  ListWebhookEventsErrors,
  GetWebhookEventByIdData,
  GetWebhookEventByIdResponses,
  GetWebhookEventByIdErrors,
  DeleteWebhookByIdData,
  DeleteWebhookByIdResponses,
  DeleteWebhookByIdErrors,
  GetV1HealthData,
  GetV1HealthResponses,
  GetV1HealthErrors,
  ListIntentData,
  ListIntentResponses,
  ListIntentErrors,
  ListIntent2Data,
  ListIntent2Responses,
  ListIntent2Errors,
  TrackIntentData,
  TrackIntentResponses,
  TrackIntentErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get a Company
 * Use this endpoint to get details about a company. The endpoint takes in a single company ID and gives you all the details about the company available in Vendr’s catalog including the name, ID and description of the products offered by that company.
 */
export const getCompany = <ThrowOnError extends boolean = false>(
  options: Options<GetCompanyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCompanyResponses,
    GetCompanyErrors,
    ThrowOnError
  >({
    url: "/v1/catalog/companies/{companyId}",
    ...options,
  });
};

/**
 * Get a Product Family
 * A product family is a group of products. For example, Zoominfo offers the Chat Product Family which contains Advanced, Custom and Professional+ products. The endpoint takes in a single company ID and gives you all the details about the product family including the products that are part of the product family as well as a range of minimum to maximum default prices for products in that family. When you want to power product specific pages, use this endpoint instead of Get a Company endpoint. For example, if you have a webpage for Zoominfo Chat product, use this endpoint to get the products under that family i.e. Advanced, Custom and Professional+ and then use the Get a Product endpoint to get details about the specific products.
 */
export const getProductFamily = <ThrowOnError extends boolean = false>(
  options: Options<GetProductFamilyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProductFamilyResponses,
    GetProductFamilyErrors,
    ThrowOnError
  >({
    url: "/v1/catalog/product-families/{productFamilyId}",
    ...options,
  });
};

/**
 * Get a Product
 * Use this endpoint to get details about a product. The endpoint takes in a single product ID and gives you all the details about the company available in Vendr’s catalog including product name, description and details of dimensions that impact prices for this product. You would typically use the dimension data this API vends to show the end user pricing dimensions, along with the options, that they could select to request a customized price estimate.
 *
 *
 * **How to use Pricing Dimensions and Included Features**
 *
 * **Pricing Dimensions:** The pricing dimensions object contains details of all the possible dimension related questions you could ask the end user to help them get a customized price estimate.
 *
 * 1. **Basic Details:** The dimension *Id*, *name* and *description* fields help you frame the question to the user e.g. for Slack Enterprise “Would you like to include Slack AI (name)? Slack AI enhances workspaces with AI-powered conversation summaries and answers, available as a premium add-on. (description)”
 * 2. **Price Impact:** Sometimes, there are pricing dimensions for which we don’t know the full price impact yet. The _priceImpactKnown_ field informs you about such dimensions. Changing values of these dimensions does not impact the price estimate. If you see a product with all dimensions marked as priceImpactKnown: false, you would not be able to get a price estimate for it. Instead, use the the company level default price range from Get a Company response, or product level default price from Get a Product response (if available).
 * 3. **Form Field:** This object helps you visually represent the dimension questions to the user. A dimension can be one of the 3 form field types - checkbox, number and select. These 3 formField types have some common fields. The *t*ype field helps you distinguish the form field type and choose the right UX representation for it. The *label* field conveys the unit for the dimension e.g. add-on. The *required* field conveys that the user is mandatorily required to provide an input for this dimension to generate an estimate. The *readonly* field whether the value of a dimension can be changed by the user or not. The *defaultValue* field helps you show the zero-state value for the dimension.
 * 1. **checkbox:** Identify such dimensions by the *type* field with value *checkbox* and enable the user to either add them or not e.g. Slack International Data Residency is an add-on that the user can choose to add to their estimate. When selected by the end user, the value of this dimension is 1.
 * 2. **number:** Identify such dimensions by the *type* field with value *number* and enable the user to enter a numeric value for it e.g. the number of users of Slack Business+. This type of form field may also have min, max and step fields which represent the constraints set by a seller on the numbers that can be entered. For example, number of users can range from 0 (min) to 250 (max) with step increase of 5 only, so 0, 50, 100, 150, 200, 250.
 * 3. **select:** Identify such dimensions by the *type* field with value *select* and enable the user to choose one of the listed options. Each option is represented by a label and a value. For example, number of API calls (label) with 3 possible values <500,000; 500,000-2,000,000; 2,000,000+.
 * 4. **Dimension Dependencies:** Some pricing dimensions depend on other pricing dimensions due to intricate pricing rules used by sellers. For example, if you want to buy the Slack AI add-on, you have to buy it for all the users you are buying slack for, though the add-on is priced per user. Therefore, the quantity of Slack AI add-on is always equal to the quantity of the Slack user dimension. We represent such dependent dimensions with the dependsOn object. It contains 2 fields:
 * 1. **dependsOnDimensionId:** This conveys the ID of the dimension this dimension is dependent on.
 * 2. **dependency:** This enum describes the nature of the dependency. There are following types of dependencies:
 * 1. **inclusion:** This represents dimensions whose inclusion is dependent on the inclusion of another dimension i.e. either both have to be included or neither can be included.
 * 2. **quantity:** This represents dimensions whose inclusion is dependent on the inclusion of another dimension and their quantity always has to be equal to the quantity of another dimension. Such dimensions always have formField type *checkbox.* The quantity dependency is only for your and the end user’s awareness. If the user selects the checkbox, you would pass its value as 1 to Vendr APIs. Vendr would convert the value to the linked quantity internally.
 *
 * **Included Features:** The Included features object contains a list of features and their description that sellers typically included in quotes and contracts without assigning a specific $ value to them. You can share the list of these features with software buyers at any point in their price estimate journey - as part of the product features list, as part of the list of deliverables included in a price estimate or as a Q&A about included features on the product’s listing page.
 */
export const getProduct = <ThrowOnError extends boolean = false>(
  options: Options<GetProductData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProductResponses,
    GetProductErrors,
    ThrowOnError
  >({
    url: "/v1/catalog/products/{productId}",
    ...options,
  });
};

/**
 * List Categories
 * All companies are assigned categories and sub-categories in the Vendr catalog which you can use to list a group of companies together using this endpoint. See categories and sub-categories on Vendr website [here](https://www.vendr.com/categories). For example, Collaboration and Communication is a category with Appointment Scheduling as one of its sub-category. This sub-category contains companies like Calendly.
 */
export const listCategories = <ThrowOnError extends boolean = false>(
  options?: Options<ListCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCategoriesResponses,
    ListCategoriesErrors,
    ThrowOnError
  >({
    url: "/v1/catalog/categories",
    ...options,
  });
};

/**
 * List Companies
 * This endpoint gives you a paginated list of companies in the Vendr catalog. The endpoint response includes company id, name, domain, description, icon, category ID and a flag to show whether the company is part of the Vendr Verified program or not. You can add multiple filters to you query as mentioned in the _Query Parameters_ section.
 */
export const listCompanies = <ThrowOnError extends boolean = false>(
  options?: Options<ListCompaniesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCompaniesResponses,
    ListCompaniesErrors,
    ThrowOnError
  >({
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/v1/catalog/companies",
    ...options,
  });
};

/**
 * List Product Families
 * This endpoint gives you a paginated list of product families for a company. The endpoint takes in a single company ID and lists all the details of all the product families offered by the company including some details of the products within the product family and the default price range for the product family.
 */
export const listProductFamilies = <ThrowOnError extends boolean = false>(
  options: Options<ListProductFamiliesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListProductFamiliesResponses,
    ListProductFamiliesErrors,
    ThrowOnError
  >({
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/v1/catalog/companies/{companyId}/product-families",
    ...options,
  });
};

/**
 * List Products
 * Use this endpoint to get the details of all the products for a company, including product dimensions. The endpoint takes in a single company ID and gives you a paginated list of all products offered by the company. list of the details about the company available in Vendr’s catalog including the name, ID and description of the products offered by that company.
 *
 * See [Important Notes](/docs/introduction#important-notes) for understanding product properties.
 */
export const getCompanyProducts = <ThrowOnError extends boolean = false>(
  options: Options<GetCompanyProductsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCompanyProductsResponses,
    GetCompanyProductsErrors,
    ThrowOnError
  >({
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/v1/catalog/companies/{companyId}/products",
    ...options,
  });
};

/**
 * Basic Price Estimate
 * Call this endpoint with a scope ID to get a pre-tax price estimate for the scope. The price estimate generated by Vendr’s Pricing AI is a price distribution and the API response contains the 25 percentile, 50 percentile and 75 percentile values of that distribution. Use these values to show the fair price range (25-75 percentile) for their scope along with a median price.
 */
export const getBasicPriceEstimate = <ThrowOnError extends boolean = false>(
  options: Options<GetBasicPriceEstimateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetBasicPriceEstimateResponses,
    GetBasicPriceEstimateErrors,
    ThrowOnError
  >({
    url: "/v1/pricing/basic/{scopeId}",
    ...options,
  });
};

/**
 * Advanced Price Estimate
 * Call this endpoint with a scope ID to get a more detailed pre-tax price estimate for the scope. The API response contains:
 * 1. **Overall Price Estimate:** The 10-90 percentile values of the overall price estimate distribution in increments of 5 (i.e. 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85 and 90 percentile values).
 * 2. **Product Level Estimate:** If you share a multi-product scope, this would give you granular product level insights i.e. the 10-90 percentile values of the product level estimate distribution in increments of 5. Please be aware that in case of a multi-product scope, the product level estimate is likely to be different that the individual price estimate for that product. This is because combining products during a purchase can impact the overall price.
 *
 * Please note that the API response is a point-in-time price estimate. The estimate could be different at different points in time as Vendr’s AI is continuously learning from new data points.
 */
export const getAdvancedPriceEstimate = <ThrowOnError extends boolean = false>(
  options: Options<GetAdvancedPriceEstimateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAdvancedPriceEstimateResponses,
    GetAdvancedPriceEstimateErrors,
    ThrowOnError
  >({
    url: "/v1/pricing/advanced/{scopeId}",
    ...options,
  });
};

/**
 * Get a Scope
 * Call this endpoint with a scope ID to retrieve the details of a previously created scope including when it was created, how it was created (manual or with a document) and the other scope IDs it is associated with (previous and next scope IDs).
 */
export const getScopeById = <ThrowOnError extends boolean = false>(
  options: Options<GetScopeByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetScopeByIdResponses,
    GetScopeByIdErrors,
    ThrowOnError
  >({
    url: "/v1/scope/{scopeId}",
    ...options,
  });
};

/**
 * Create a Scope
 * Use this endpoint to register the scope with us when the end user shares the scope on your application. For example, after seeing the product details powered by Vendr catalog on your application, an end user can specify that they need 100 licenses of a product along with an add-on such as support. The scope API input is divided into 3 parts:
 *
 * 1. **Scope Terms:** These terms apply to the overall scope of the purchase, which may include multiple products. It is mandatory to share term length and purchase type (new or renewal) in scope terms. You have the option to specify desired start/end date, term length, price and discount the end user has already received for this product, if they already have a quote.
 * 2. **Product Terms:** These terms apply to each individual product ID in the scope. The terms are the values of the pricing dimensions that the user wants (refer to Get a Product end point description for details on Pricing Dimensions). Here are the key things to remember when providing pricing dimension values.
 * 1. Please ensure to send a value for all required dimensions. If a value for a required dimension is missing, scope creation will not succeed.
 * 2. If *checkbox* type dimension is checked by the user, send value as 1. If not checked, send null value.
 * 3. For *number* type dimension, send the numeric value entered by the user.
 * 4. For *select* type dimension, send one of the value options selected by the user.
 * 5. You have the option to specify product level start/end date, list price, discount and final price if the end user has already received a quote.
 * 3. **Previous Scope ID (optional):** If you want to edit a scope you previously registered, add the previousScopeID to your API call. We will store both scopes and maintain the association between them.
 *
 * When you register a scope, you receive a scope ID in return. You can use this scope ID to get pricing insights from the pricing API.
 */
export const createScope = <ThrowOnError extends boolean = false>(
  options: Options<CreateScopeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateScopeResponses,
    CreateScopeErrors,
    ThrowOnError
  >({
    url: "/v1/scope",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Scope via Document
 * When the end user already has a quote for their needs and is looking to verify the price they have received, they can simply upload the pricing part of the quote as well in one of the following file formats - pdf, doc, docx, xls, xlsx, csv, png, jpg and jpeg. Use this endpoint to create a scope using a document. Our services extract the scope from the submitted document automatically. Similar to create a scope, when you register a scope, you receive a scope ID in return. You can use this scope ID to get pricing insights from the pricing API. Please note that there is a time lag in scope ID generation when using this endpoint. Please create a webhook to get a notification when the scope ID is ready (see Webhook API section for details).
 */
export const createScopeFromDocument = <ThrowOnError extends boolean = false>(
  options: Options<CreateScopeFromDocumentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateScopeFromDocumentResponses,
    CreateScopeFromDocumentErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: "/v1/scope/from-document",
    ...options,
    headers: {
      "Content-Type": null,
      ...options.headers,
    },
  });
};

/**
 * OpenAPI Specification
 * Returns the OpenAPI V3 spec for Vendr's Public API
 */
export const getV1Openapi = <ThrowOnError extends boolean = false>(
  options?: Options<GetV1OpenapiData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetV1OpenapiResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v1/openapi",
    ...options,
  });
};

/**
 * List webhooks
 * List all webhooks
 */
export const listWebhooks = <ThrowOnError extends boolean = false>(
  options?: Options<ListWebhooksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListWebhooksResponses,
    ListWebhooksErrors,
    ThrowOnError
  >({
    url: "/v1/webhooks",
    ...options,
  });
};

/**
 * Create a webhook
 * Create a new webhook
 */
export const createWebhook = <ThrowOnError extends boolean = false>(
  options: Options<CreateWebhookData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateWebhookResponses,
    CreateWebhookErrors,
    ThrowOnError
  >({
    url: "/v1/webhooks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List webhook events
 * List all webhook events
 */
export const listWebhookEvents = <ThrowOnError extends boolean = false>(
  options: Options<ListWebhookEventsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListWebhookEventsResponses,
    ListWebhookEventsErrors,
    ThrowOnError
  >({
    url: "/v1/webhooks/{webhookId}/events",
    ...options,
  });
};

/**
 * Get webhook event
 * Get a specific webhook event
 */
export const getWebhookEventById = <ThrowOnError extends boolean = false>(
  options: Options<GetWebhookEventByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWebhookEventByIdResponses,
    GetWebhookEventByIdErrors,
    ThrowOnError
  >({
    url: "/v1/webhooks/{webhookId}/events/{eventId}",
    ...options,
  });
};

/**
 * Delete webhook
 * Delete a webhook
 */
export const deleteWebhookById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteWebhookByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteWebhookByIdResponses,
    DeleteWebhookByIdErrors,
    ThrowOnError
  >({
    url: "/v1/webhooks/{webhookId}",
    ...options,
  });
};

/**
 * Health check
 * Check if the server is running
 */
export const getV1Health = <ThrowOnError extends boolean = false>(
  options?: Options<GetV1HealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetV1HealthResponses,
    GetV1HealthErrors,
    ThrowOnError
  >({
    url: "/v1/health",
    ...options,
  });
};

/**
 * List Intent
 * Returns a paginated list of intent with optional filters
 */
export const listIntent = <ThrowOnError extends boolean = false>(
  options?: Options<ListIntentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListIntentResponses,
    ListIntentErrors,
    ThrowOnError
  >({
    querySerializer: {
      array: {
        explode: false,
        style: "form",
      },
    },
    url: "/v1/intent",
    ...options,
  });
};

/**
 * List Intent
 * Returns a paginated list of intent with optional filters
 */
export const listIntent2 = <ThrowOnError extends boolean = false>(
  options: Options<ListIntent2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ListIntent2Responses,
    ListIntent2Errors,
    ThrowOnError
  >({
    url: "/v1/intent",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Track intent
 * Track API is an additional optional endpoint for partners to share end user tracking details with Vendr if the details can’t be shared in real-time in Catalog API header along with the calls to Catalog API endpoints.
 */
export const trackIntent = <ThrowOnError extends boolean = false>(
  options: Options<TrackIntentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TrackIntentResponses,
    TrackIntentErrors,
    ThrowOnError
  >({
    url: "/v1/track",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
